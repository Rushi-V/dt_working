# main.py

from vex import *
import time

# Initialize devices
brain = Brain()
controller_1 = Controller(PRIMARY)
left_motor_a = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
left_motor_b = Motor(Ports.PORT3, GearSetting.RATIO_6_1, True)
left_motor_c = Motor(Ports.PORT4, GearSetting.RATIO_6_1, True)
 
right_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)
right_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_6_1, False)
right_motor_c = Motor(Ports.PORT17, GearSetting.RATIO_6_1, False)
 
left_drive_smart = MotorGroup(left_motor_a, left_motor_b, left_motor_c)
right_drive_smart = MotorGroup(right_motor_a, right_motor_b, right_motor_c)
High_scoring = Motor(Ports.PORT20)
intake_lower = Motor(Ports.PORT21)
intake_upper = Motor(Ports.PORT13)
mogo_p = DigitalOut(brain.three_wire_port.f)
ejection_p = DigitalOut(brain.three_wire_port.a)
ejection_p.set(False)
donker = DigitalOut(brain.three_wire_port.h)
donker.set(False)
intake_p = DigitalOut(brain.three_wire_port.d)
rotational_sensor = Rotation(Ports.PORT19, True)
rotational_sensor.set_position(0, DEGREES)

vertical_rotational_sensor = Rotation(Ports.PORT7, True)
horizontal_rotational_sensor = Rotation(Ports.PORT6, False)
vertical_rotational_sensor.set_position(0, DEGREES)
horizontal_rotational_sensor.set_position(0, DEGREES)


# Constants
MSEC_PER_SEC = 1000

# define an enum for intake state
class IntakeState:
    STOPPED = 0
    RUNNING = 1
    STALLED = 2
    FIXINGSTALL = 3

class RingType:
    NONE = 0
    RED = 1
    BLUE = 2

MIN_REJECT_SIZE=5000
# Define the color signatures based of the config copied below
REDD = Signature(1, 9907, 12073, 10990, -1991, -879, -1435, 2.5, 0)
BLUEE = Signature(2, -4415, -3205, -3810, 5461, 8989, 7225, 2.5, 0)
'''{
  "brightness": 50,
  "signatures": [
    {
      "name": "REDD",
      "parameters": {
        "uMin": 9907,
        "uMax": 12073,
        "uMean": 10990,
        "vMin": -1991,
        "vMax": -879,
        "vMean": -1435,
        "rgb": 5973535,
        "type": 0,
        "name": "REDD"
      },
      "range": 2.5
    },
    {
      "name": "BLUEE",
      "parameters": {
        "uMin": -4415,
        "uMax": -3205,
        "uMean": -3810,
        "vMin": 5461,
        "vMax": 8989,
        "vMean": 7225,
        "rgb": 1714760,
        "type": 0,
        "name": "BLUEE"
      },
      "range": 2.5
    }
  ],
  "codes": []
}'''
Color_sensor = Optical(Ports.PORT15)
Color_sensor.set_light_power(100)
# Initialize eject_counter
eject_counter = 0
eject_object = RingType.NONE

intake_state = IntakeState.STOPPED

# Global variables
slow_drive = False
high_scoring_running = False
current_direction = FORWARD
high_scoring_mode = False
# Constants
STALL_THRESHOLD = 0       # Adjust as needed
STALL_COUNT = 20
RETRY_LIMIT = 15
EJECT_LIMIT= 20
MSEC_PER_SEC = 1000
# Define constants for the target angles
HIGH_SCORE_TARGET_ANGLE_SCORE = -430
HIGH_SCORE_TARGET_ANGLE_WAIT = -200
HIGH_SCORE_TARGET_ANGLE_CAPTURE = -60
HIGH_SCORE_TARGET_ANGLE_DOWN = 0
MAX_CAPTURE_POSITION_COUNT = 51
# Global variables
retry_count = 0
consecutive_stall_count = 0
high_scoring_running = False
high_score_stall = False  # Set this accordingly in your main code if needed
high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_DOWN
capture_position_counter = 0

def set_high_score_angle(angle):
    global high_score_target_angle, capture_position_counter
    if (angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE):
        high_score_target_angle = angle
        capture_position_counter = MAX_CAPTURE_POSITION_COUNT
    elif (angle == HIGH_SCORE_TARGET_ANGLE_SCORE) and high_score_target_angle <= angle:
        high_score_target_angle -= 40
    else:
        high_score_target_angle = angle

# Function to set the state of the high scoring motor
def adjust_high_scoring_motor_position():
    global high_score_target_angle, capture_position_counter

    #print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
    High_scoring.set_stopping(BRAKE)
    High_scoring.set_velocity(100, PERCENT)
    if high_score_target_angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE and abs(High_scoring.position(DEGREES) - rotational_sensor.position(DEGREES)) > 2:
        if capture_position_counter > 0:
            capture_position_counter -= 1
        else:
            print("Chaning motor position")
            print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
            High_scoring.set_position(rotational_sensor.position(DEGREES), DEGREES)
    High_scoring.spin_to_position(high_score_target_angle, DEGREES, 30, PERCENT, False)

def auto_adjust_high_scoring_motor_position():
    global high_score_target_angle, capture_position_counter

    stall_detection_and_handling()

    #print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
    High_scoring.set_stopping(BRAKE)
    High_scoring.set_velocity(100, PERCENT)
    if high_score_target_angle == HIGH_SCORE_TARGET_ANGLE_CAPTURE and abs(High_scoring.position(DEGREES) - rotational_sensor.position(DEGREES)) > 2:
        if capture_position_counter > 0:
            capture_position_counter -= 1
        else:
            print("Chaning motor position")
            print(" Rotating angle is " + str(rotational_sensor.position(DEGREES)) + "high score motor angle is " + str(High_scoring.position(DEGREES)))
            High_scoring.set_position(rotational_sensor.position(DEGREES), DEGREES)
    High_scoring.spin_to_position(high_score_target_angle, DEGREES, 30, PERCENT, False)
    while (High_scoring.position(DEGREES) != high_score_target_angle):
        stall_detection_and_handling()

# Function to set the state of the intake motor
def set_intake_motor_state(direction=FORWARD):
    global intake_state, current_direction, eject_counter, high_score_stall
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.FIXINGSTALL:
        intake_lower.set_velocity(90, PERCENT)
        intake_upper.set_velocity(80, PERCENT)
        intake_lower.spin(direction)
        if intake_state == IntakeState.FIXINGSTALL:
            if not high_score_stall:
                print("Intake motor state is fixing stall")
                intake_upper.spin(direction)
            else:
                high_score_stall = False
                print("Just stopping as this is high scoring stall " + str(direction))
                intake_upper.stop()
        else:
            intake_upper.spin(REVERSE if direction == FORWARD else FORWARD)
        current_direction = direction
    else:
        intake_lower.stop()
        intake_upper.stop()

# Stall detection and handling for the intake motor
def stall_detection_and_handling():
    global intake_state, consecutive_stall_count, retry_count, high_score_stall, high_score_target_angle, high_scoring_running, eject_counter
    global current_direction
    if intake_state == IntakeState.RUNNING or intake_state == IntakeState.STALLED:
        if intake_state == IntakeState.RUNNING and eject_counter > 0:
                eject_counter = eject_counter - 1
                #print("Decremeting eject counter " + str(eject_counter))
                if eject_counter == 0:
                    #print("stopping the motor momentarily")
                    intake_state = IntakeState.STOPPED
                    set_intake_motor_state(current_direction)
                    wait(100, MSEC)
                    #intake_state = IntakeState.RUNNING
                    #set_intake_motor_state(current_direction)
        current_velocity = intake_upper.velocity(PERCENT)
        if abs(current_velocity) <= STALL_THRESHOLD:
            #print("Stalled" + str(consecutive_stall_count))
            consecutive_stall_count += 1
        else:
            consecutive_stall_count = 0

        if consecutive_stall_count >= STALL_COUNT:
            print("Unstaling")
            intake_state = IntakeState.FIXINGSTALL
            # This state will change upper motor in opposite direction
            if high_scoring_running:
                print("High scoring stall setting it true")
                high_score_stall = True
                set_intake_motor_state(current_direction)
                set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
                adjust_high_scoring_motor_position()
            else:
                set_intake_motor_state(current_direction)

            consecutive_stall_count = 0
            retry_count = RETRY_LIMIT
    else:
        consecutive_stall_count = 0
    if intake_state == IntakeState.FIXINGSTALL:
        if retry_count == 0:
            if high_score_stall:
                print("Stoppping because of high stall")
                intake_state = IntakeState.STOPPED
                set_intake_motor_state(FORWARD)
            else:
                print("Fixed")
                intake_state = IntakeState.RUNNING
                set_intake_motor_state(current_direction)
        else:
            #print("Retrying")
            retry_count -= 1


# wait for rotation sensor to fully initialize
wait(30, MSEC)


#Paths
red_left_tomogo = [(-151.774, 126.162), (-146.975, 127.301), (-142.079, 126.393), (-137.475, 124.457), (-133.118, 122.009), (-128.948, 119.253), (-124.916, 116.296), (-121.0, 113.188), (-117.168, 109.976), (-113.407, 106.682), (-109.703, 103.323), (-106.048, 99.911), (-102.43, 96.461), (-98.847, 92.974), (-95.288, 89.461), (-91.75, 85.929), (-88.228, 82.379), (-84.715, 78.821), (-81.208, 75.258), (-77.699, 71.695), (-74.183, 68.141), (-70.649, 64.603), (-67.087, 61.094), (-62.038, 56.275), (-62.038, 56.275)]
red_left_tofirststack = [(-66.948, 66.505), (-64.771, 81.588), (-63.049, 96.73), (-60.55, 111.758), (-59.156, 118.226), (-59.156, 118.226)]
red_left_totower = [(-56.005, 109.686), (-55.187, 107.861), (-54.426, 106.011), (-53.718, 104.141), (-53.062, 102.251), (-52.459, 100.345), (-51.91, 98.421), (-51.418, 96.483), (-50.985, 94.531), (-50.614, 92.565), (-50.31, 90.589), (-50.077, 88.602), (-49.92, 86.609), (-49.844, 84.61), (-49.855, 82.611), (-49.96, 80.614), (-50.165, 78.624), (-50.476, 76.649), (-50.898, 74.694), (-51.438, 72.769), (-52.099, 70.882), (-52.883, 69.042), (-53.793, 67.261), (-54.822, 65.547), (-55.972, 63.912), (-56.915, 62.728), (-56.915, 62.728)]
red_left_lasttwo = [(-48.378, 156.517), (-46.712, 155.41), (-45.102, 154.225), (-43.546, 152.968), (-42.048, 151.643), (-40.605, 150.258), (-39.218, 148.818), (-37.888, 147.324), (-36.613, 145.783), (-35.396, 144.196), (-34.235, 142.568), (-33.131, 140.901), (-32.085, 139.196), (-31.096, 137.458), (-30.168, 135.687), (-29.298, 133.886), (-28.488, 132.057), (-27.742, 130.202), (-27.057, 128.323), (-26.436, 126.422), (-25.882, 124.5), (-25.394, 122.561), (-24.973, 120.606), (-24.622, 118.637), (-24.343, 116.656), (-24.136, 114.667), (-24.002, 112.672), (-23.943, 110.673), (-23.962, 108.673), (-24.057, 106.676), (-24.229, 104.683), (-24.479, 102.699), (-24.811, 100.727), (-25.221, 98.769), (-25.709, 96.83), (-26.274, 94.912), (-26.917, 93.018), (-27.635, 91.152), (-28.427, 89.316), (-29.292, 87.512), (-30.227, 85.744), (-31.23, 84.014), (-32.298, 82.323), (-33.428, 80.673), (-34.149, 79.681), (-34.149, 79.681)]
first_red_left_4 = [(-38.418, 106.242), (-38.361, 108.24), (-38.381, 110.238), (-38.496, 112.234), (-38.698, 114.222), (-39.011, 116.196), (-39.423, 118.152), (-39.944, 120.081), (-40.582, 121.976), (-41.329, 123.829), (-42.187, 125.634), (-43.158, 127.381), (-44.235, 129.065), (-45.408, 130.682), (-46.672, 132.231), (-48.025, 133.702), (-49.454, 135.1), (-50.949, 136.426), (-52.506, 137.679), (-54.118, 138.861), (-55.775, 139.979), (-57.476, 141.029), (-59.211, 142.021), (-60.978, 142.955), (-62.773, 143.836), (-64.591, 144.665), (-66.43, 145.448), (-68.289, 146.184), (-70.162, 146.882), (-72.05, 147.538), (-73.95, 148.159), (-75.861, 148.747), (-77.782, 149.301), (-79.711, 149.825), (-81.647, 150.323), (-83.589, 150.793), (-85.538, 151.238), (-87.492, 151.66), (-89.45, 152.061), (-91.413, 152.442), (-93.379, 152.802), (-95.349, 153.144), (-97.321, 153.469), (-99.296, 153.778), (-101.273, 154.071), (-103.252, 154.351), (-105.234, 154.617), (-107.217, 154.87), (-109.201, 155.11), (-111.187, 155.339), (-113.174, 155.557), (-115.162, 155.765), (-117.151, 155.964), (-119.141, 156.153), (-121.132, 156.334), (-123.123, 156.507), (-125.115, 156.672), (-127.108, 156.831), (-129.101, 156.982), (-131.095, 157.127), (-133.089, 157.266), (-135.084, 157.4), (-137.079, 157.528), (-139.074, 157.652), (-141.069, 157.771), (-143.065, 157.886), (-145.061, 157.998), (-147.057, 158.106), (-149.053, 158.21), (-151.049, 158.312), (-153.046, 158.411), (-155.043, 158.507), (-157.039, 158.602), (-159.036, 158.694), (-161.033, 158.785), (-163.03, 158.875), (-165.027, 158.964), (-167.024, 159.051), (-169.021, 159.139), (-171.018, 159.225), (-171.42, 159.243), (-171.42, 159.243)]
red_left_back_4 = [(-171.42, 159.243), (-169.42, 159.268), (-167.42, 159.293), (-165.42, 159.318), (-163.42, 159.342), (-161.42, 159.365), (-159.42, 159.387), (-157.42, 159.408), (-155.421, 159.428), (-153.421, 159.446), (-151.421, 159.463), (-149.421, 159.479), (-147.421, 159.492), (-145.421, 159.503), (-143.421, 159.511), (-141.421, 159.516), (-139.421, 159.516), (-137.421, 159.513), (-135.421, 159.505), (-133.421, 159.493), (-131.421, 159.476), (-129.421, 159.455), (-127.421, 159.433), (-125.421, 159.41), (-123.422, 159.387), (-121.422, 159.366), (-119.422, 159.346), (-117.422, 159.329), (-115.422, 159.313), (-113.422, 159.299), (-111.422, 159.287), (-109.422, 159.277), (-107.422, 159.269), (-105.422, 159.261), (-103.422, 159.256), (-101.422, 159.251), (-99.422, 159.247), (-97.422, 159.245), (-95.422, 159.243), (-92.961, 159.243), (-92.961, 159.243)]

blue_right_tomogo = [(abs(x), y) for x, y, *_ in red_left_tomogo]
blue_right_tofirststack = [(abs(x), y) for x, y, *_ in red_left_tofirststack]
blue_right_totower = [(abs(x), y) for x, y, *_ in red_left_totower]
blue_right_lasttwo = [(abs(x), y) for x, y, *_ in red_left_lasttwo]
first_blue_right_4 =[(abs(x), y) for x, y, *_ in first_red_left_4]
blue_right_back_4 = [(abs(x), y) for x, y, *_ in red_left_back_4]

blue_left_tomogo = [(abs(x), -y) for x, y, *_ in red_left_tomogo]
blue_left_tofirststack = [(abs(x), -y) for x, y, *_ in red_left_tofirststack]
blue_left_totower = [(abs(x), -y) for x, y, *_ in red_left_totower]
blue_left_lasttwo = [(abs(x), -y) for x, y, *_ in red_left_lasttwo]
first_blue_left_4 =[(abs(x), -y) for x, y, *_ in first_red_left_4]
blue_left_back_4 = [(abs(x), -y) for x, y, *_ in red_left_back_4]

red_right_tomogo = [((x), -y) for x, y, *_ in red_left_tomogo]
red_right_tofirststack = [((x), -y) for x, y, *_ in red_left_tofirststack]
red_right_totower = [((x), -y) for x, y, *_ in red_left_totower]
red_right_lasttwo = [((x), -y) for x, y, *_ in red_left_lasttwo]
first_red_right_4 =[((x), -y) for x, y, *_ in first_red_left_4]
red_right_back_4 = [((x), -y) for x, y, *_ in red_left_back_4]


# Testing paths
decreasing_x = [(150,00),(100,0), (50,0), (0,0)]
increasing_x = increasing_x_points = [(x, 0) for x in range(0, 150, 10)]

#[(-66.948, 66.505), (-65.755, 81.698), (-63.714, 96.795), (-60.605, 111.714), (-59.156, 118.226), (-59.156, 118.226)]
#[(-66.948, 66.505), (-74.311, 79.794), (-75.997, 94.745), (-69.597, 108.353), (-59.156, 118.226), (-59.156, 118.226)]
#red_left_tofirststack = [ (-59.156, 118.226)]
start_pos_size = -1

p1redright = [(-161.178, -60.913), (-159.178, -60.896), (-157.178, -60.878), (-155.178, -60.861), (-153.178, -60.843)] # ,(-151.178, -60.826), (-149.178, -60.808), (-147.178, -60.791),(-145.178, -60.773), (-143.178, -60.756), (-141.179, -60.738), (-139.179, -60.72), (-137.179, -60.703), (-135.179, -60.685), (-133.179, -60.668), (-131.179, -60.65), (-129.179, -60.633), (-127.179, -60.615), (-125.179, -60.598), (-123.179, -60.58), (-121.179, -60.563), (-119.179, -60.545), (-117.179, -60.527), (-115.18, -60.51), (-113.18, -60.492)
p2redright = [(-102.342, -58.793), (-100.343, -58.837), (-98.343, -58.881), (-96.344, -58.925), (-94.344, -58.969), (-92.345, -59.013), (-90.345, -59.057), (-88.346, -59.101), (-86.346, -59.145), (-84.347, -59.189), (-82.347, -59.233), (-80.347, -59.277), (-78.348, -59.321), (-76.348, -59.364), (-74.349, -59.408), (-72.349, -59.452), (-70.35, -59.496), (-68.35, -59.54), (-66.351, -59.584), (-64.351, -59.628), (-62.352, -59.672), (-60.352, -59.716), (-58.353, -59.76), (-56.353, -59.804), (-54.108, -59.853), (-54.108, -59.853)]
p3redright = [(-54.108, -59.853), (-54.267, -61.847), (-54.427, -63.84), (-54.586, -65.834), (-54.746, -67.828), (-54.905, -69.821), (-55.065, -71.815), (-55.224, -73.808), (-55.384, -75.802), (-55.543, -77.796), (-55.703, -79.789), (-55.862, -81.783), (-56.022, -83.777), (-56.181, -85.77), (-56.341, -87.764), (-56.5, -89.757), (-56.66, -91.751), (-56.819, -93.745), (-56.979, -95.738), (-57.138, -97.732), (-57.298, -99.726), (-57.457, -101.719), (-57.616, -103.713), (-57.776, -105.707), (-57.935, -107.7), (-58.095, -109.694), (-58.254, -111.687), (-58.414, -113.681), (-58.573, -115.675), (-58.733, -117.668), (-58.892, -119.662), (-59.052, -121.656), (-59.211, -123.649), (-59.408, -126.11), (-59.408, -126.11)]
p4redright = [(-59.408, -126.11), (-58.758, -144.674), (-60.758, -144.688), (-62.758, -144.701), (-64.758, -144.714), (-66.758, -144.727), (-68.758, -144.741), (-70.758, -144.754), (-72.758, -144.767), (-74.758, -144.78), (-76.758, -144.794), (-78.758, -144.807), (-80.757, -144.82), (-82.757, -144.833), (-84.757, -144.847), (-86.757, -144.86), (-88.757, -144.873), (-90.757, -144.886), (-92.757, -144.9), (-94.757, -144.913), (-96.757, -144.926), (-98.757, -144.939), (-100.757, -144.953), (-102.757, -144.966), (-104.757, -144.979), (-106.757, -144.992), (-108.757, -145.006), (-110.757, -145.019), (-112.757, -145.032), (-114.757, -145.045), (-116.757, -145.059), (-118.757, -145.072), (-120.757, -145.085), (-122.757, -145.098), (-124.757, -145.112), (-126.756, -145.125), (-128.756, -145.138), (-130.756, -145.151)] # , (-132.756, -145.165), (-134.756, -145.178), (-136.795, -145.191), (-136.795, -145.191)
#p5redright = [(-136.795, -145.191), (-134.83, -144.819), (-132.865, -144.447), (-130.9, -144.074), (-128.935, -143.702), (-126.97, -143.33), (-125.005, -142.958), (-123.04, -142.586), (-121.075, -142.213), (-119.109, -141.841), (-117.144, -141.469), (-115.179, -141.097), (-113.214, -140.724), (-111.249, -140.352), (-109.284, -139.98), (-107.319, -139.608), (-105.354, -139.236), (-103.389, -138.863), (-101.424, -138.491), (-99.459, -138.119), (-97.494, -137.747), (-95.529, -137.375), (-93.564, -137.002), (-91.599, -136.63), (-89.634, -136.258), (-87.669, -135.886), (-85.703, -135.513), (-83.738, -135.141), (-81.773, -134.769), (-79.808, -134.397), (-77.843, -134.025), (-75.878, -133.652), (-73.913, -133.28), (-71.948, -132.908), (-69.983, -132.536), (-68.018, -132.164), (-66.053, -131.791), (-64.088, -131.419), (-62.123, -131.047), (-60.158, -130.675), (-58.193, -130.302), (-56.228, -129.93), (-54.263, -129.558), (-52.297, -129.186), (-50.332, -128.814), (-48.367, -128.441), (-46.402, -128.069), (-44.437, -127.697), (-42.472, -127.325), (-40.507, -126.953)] #, (-38.542, -126.58), (-36.577, -126.208), (-34.612, -125.836), (-31.788, -125.301), (-31.788, -125.301)
#p6redright = [(-40.507, -126.953), (-42.047, -125.676), (-43.586, -124.4), (-45.126, -123.123), (-46.665, -121.846), (-48.205, -120.57), (-49.744, -119.293), (-51.284, -118.017), (-52.823, -116.74), (-54.363, -115.463), (-55.902, -114.187), (-57.442, -112.91), (-58.982, -111.633), (-60.521, -110.357), (-62.061, -109.08), (-63.6, -107.803), (-65.14, -106.527), (-66.679, -105.25), (-68.219, -103.974), (-69.758, -102.697), (-71.298, -101.42), (-72.837, -100.144), (-74.377, -98.867), (-75.917, -97.59), (-77.456, -96.314), (-78.996, -95.037), (-80.535, -93.76), (-82.075, -92.484), (-83.614, -91.207), (-85.154, -89.931), (-86.693, -88.654), (-88.233, -87.377), (-89.772, -86.101), (-91.312, -84.824), (-92.851, -83.547), (-94.391, -82.271), (-95.931, -80.994), (-97.47, -79.717), (-99.01, -78.441), (-99.692, -77.875), (-99.692, -77.875)]
p7redright = [(-130.756, -145.151), (-129.439, -143.646), (-128.123, -142.14), (-126.806, -140.635), (-125.489, -139.129), (-124.173, -137.624), (-122.856, -136.118), (-121.539, -134.613), (-120.223, -133.107), (-118.906, -131.602), (-117.589, -130.097), (-116.272, -128.591), (-114.956, -127.086), (-113.639, -125.58), (-112.322, -124.075), (-111.006, -122.569), (-109.689, -121.064), (-108.372, -119.559), (-107.056, -118.053), (-105.739, -116.548), (-104.422, -115.042), (-103.106, -113.537), (-101.789, -112.031), (-100.472, -110.526), (-99.156, -109.02), (-97.839, -107.515), (-96.522, -106.01), (-95.206, -104.504), (-93.889, -102.999), (-92.572, -101.493), (-91.256, -99.988), (-89.939, -98.482), (-88.622, -96.977), (-87.305, -95.472), (-85.989, -93.966), (-84.672, -92.461), (-83.355, -90.955), (-82.039, -89.45), (-80.722, -87.944), (-79.405, -86.439), (-78.089, -84.933), (-76.772, -83.428), (-75.455, -81.923), (-74.139, -80.417), (-72.822, -78.912), (-71.505, -77.406), (-70.189, -75.901), (-68.872, -74.395), (-67.555, -72.89), (-66.239, -71.384), (-64.922, -69.879), (-63.605, -68.374), (-62.289, -66.868), (-60.972, -65.363), (-59.655, -63.857), (-58.338, -62.352), (-57.022, -60.846), (-55.705, -59.341), (-54.388, -57.836), (-53.072, -56.33), (-51.755, -54.825), (-50.438, -53.319), (-49.122, -51.814)] #, (-47.805, -50.308), (-46.488, -48.803), (-45.172, -47.297), (-43.855, -45.792), (-42.538, -44.287), (-41.222, -42.781), (-39.905, -41.276), (-38.588, -39.77), (-37.146, -38.121), (-37.146, -38.121)
#p6redright = [(-31.788, -125.301), (-31.804, -123.301), (-31.819, -121.301), (-31.835, -119.301), (-31.85, -117.301), (-31.866, -115.301), (-31.881, -113.301), (-31.897, -111.301), (-31.912, -109.301), (-31.928, -107.302), (-31.944, -105.302), (-31.959, -103.302), (-31.975, -101.302), (-31.99, -99.302), (-32.006, -97.302), (-32.021, -95.302), (-32.037, -93.302), (-32.052, -91.302), (-32.068, -89.302), (-32.084, -87.302), (-32.099, -85.302), (-32.115, -83.302), (-32.13, -81.302), (-32.146, -79.302), (-32.161, -77.302), (-32.177, -75.303), (-32.193, -73.303), (-32.208, -71.303), (-32.224, -69.303), (-32.239, -67.303), (-32.255, -65.303), (-32.27, -63.303), (-32.286, -61.303), (-32.301, -59.303), (-32.317, -57.303), (-32.333, -55.303), (-32.348, -53.303), (-32.364, -51.303), (-32.375, -49.782), (-32.375, -49.782)]

p1blueleft = [(abs(x), y) for x, y, *_ in p1redright]
p2blueleft = [(abs(x), y) for x, y, *_ in p2redright]
p3blueleft = [(abs(x), y) for x, y, *_ in p3redright]
p4blueleft = [(abs(x), y) for x, y, *_ in p4redright]
p7blueleft = [(abs(x), y) for x, y, *_ in p7redright]


# pathfile: collect_left_bottom_rings1_StraightLines.txt
path_one = [(-94.072, 96.812, 120, 0), (-92.122, 97.254, 120), (-90.171, 97.695, 120), (-88.22, 98.137, 120), (-86.27, 98.578, 120), (-84.319, 99.019, 120), (-82.368, 99.461, 120), (-80.417, 99.902, 120), (-78.467, 100.344, 120), (-76.516, 100.785, 120), (-74.565, 101.226, 120), (-72.615, 101.668, 120), (-70.664, 102.109, 120), (-68.713, 102.551, 120), (-66.763, 102.992, 120), (-64.812, 103.433, 120), (-62.861, 103.875, 120), (-60.911, 104.316, 120), (-58.96, 104.758, 120), (-57.009, 105.199, 120), (-55.059, 105.64, 120), (-53.108, 106.082, 120), (-51.157, 106.523, 120), (-49.207, 106.965, 120), (-47.256, 107.406, 120), (-45.305, 107.847, 120), (-43.354, 108.289, 120), (-41.404, 108.73, 120), (-39.453, 109.172, 120), (-37.502, 109.613, 120), (-35.552, 110.054, 120), (-33.601, 110.496, 120), (-31.65, 110.937, 120), (-29.7, 111.379, 120), (-27.749, 111.82, 120), (-25.798, 112.261, 120), (-23.848, 112.703, 120), (-21.897, 113.144, 120), (-19.946, 113.586, 120), (-17.996, 114.027, 120), (-16.045, 114.468, 120), (-14.094, 114.91, 120), (-12.144, 115.351, 120), (-10.193, 115.793, 120), (-8.242, 116.234, 120), (-6.291, 116.675, 120), (-4.341, 117.117, 120), (-2.39, 117.558, 120), (-0.439, 117.999, 120, 0), (1.555, 118.091, 120), (3.554, 118.138, 120), (5.553, 118.185, 120), (7.553, 118.232, 120), (9.552, 118.279, 120), (11.552, 118.326, 120), (13.551, 118.373, 120), (15.551, 118.42, 120), (17.55, 118.467, 120), (19.55, 118.514, 120), (21.549, 118.562, 120), (23.548, 118.609, 120), (25.548, 118.656, 120), (27.547, 118.703, 120), (29.547, 118.75, 120), (31.546, 118.797, 120), (33.546, 118.844, 120), (35.545, 118.891, 120), (37.545, 118.938, 120), (39.544, 118.985, 120), (41.543, 119.032, 120), (43.543, 119.079, 120), (45.542, 119.126, 120), (47.542, 119.173, 120), (49.541, 119.22, 120), (51.541, 119.267, 120), (53.54, 119.314, 120), (55.54, 119.361, 120), (58.011, 119.419, 120, 0), (58.011, 119.419, 0, 0)]

# pathfile: collect_left_bottom_rings2_StraightLines.txt
path_two = [(58.696, 120.104, 120, 0), (56.696, 120.104, 120), (54.696, 120.104, 120), (52.696, 120.104, 120), (50.696, 120.104, 120), (48.696, 120.104, 120), (46.696, 120.104, 120), (44.696, 120.104, 120), (42.696, 120.104, 120), (40.696, 120.104, 120), (38.696, 120.104, 120), (36.696, 120.104, 120), (34.696, 120.104, 120), (32.696, 120.104, 120), (30.696, 120.104, 120), (28.696, 120.104, 120), (26.696, 120.104, 120), (24.696, 120.104, 120), (22.696, 120.104, 120), (20.696, 120.104, 120), (18.696, 120.104, 120), (16.696, 120.104, 120), (14.696, 120.104, 120), (12.696, 120.104, 120), (10.696, 120.104, 120), (8.696, 120.104, 120), (6.696, 120.104, 120), (4.696, 120.104, 120), (2.696, 120.104, 120), (0.696, 120.104, 120), (-1.304, 120.104, 120), (-3.304, 120.104, 120), (-5.304, 120.104, 120), (-7.304, 120.104, 120), (-9.304, 120.104, 120), (-11.304, 120.104, 120), (-13.304, 120.104, 120), (-15.304, 120.104, 120), (-17.304, 120.104, 120), (-19.304, 120.104, 120), (-21.304, 120.104, 120), (-23.304, 120.104, 120), (-25.304, 120.104, 120), (-27.304, 120.104, 120), (-29.304, 120.104, 120), (-31.304, 120.104, 120), (-33.304, 120.104, 120), (-35.304, 120.104, 120), (-37.304, 120.104, 120), (-39.304, 120.104, 120), (-41.304, 120.104, 120), (-43.304, 120.104, 120), (-45.304, 120.104, 120), (-47.304, 120.104, 120), (-49.304, 120.104, 120), (-51.304, 120.104, 120), (-53.304, 120.104, 120), (-55.304, 120.104, 120), (-57.304, 120.104, 120), (-59.304, 120.104, 120), (-61.304, 120.104, 120), (-63.304, 120.104, 120), (-65.304, 120.104, 120), (-67.304, 120.104, 120), (-69.304, 120.104, 120), (-71.304, 120.104, 120), (-73.304, 120.104, 120), (-75.304, 120.104, 120), (-77.304, 120.104, 120), (-79.304, 120.104, 120), (-81.304, 120.104, 120), (-83.304, 120.104, 120), (-85.304, 120.104, 120), (-87.304, 120.104, 120), (-89.304, 120.104, 120), (-91.304, 120.104, 120), (-93.304, 120.104, 120), (-95.304, 120.104, 120), (-97.304, 120.104, 120), (-99.304, 120.104, 120), (-101.304, 120.104, 120), (-103.304, 120.104, 120), (-105.304, 120.104, 120), (-107.304, 120.104, 120), (-109.304, 120.104, 120), (-111.304, 120.104, 120), (-113.304, 120.104, 120), (-115.304, 120.104, 120), (-117.304, 120.104, 120), (-119.304, 120.104, 120), (-121.304, 120.104, 120), (-123.304, 120.104, 120), (-125.304, 120.104, 120), (-127.304, 120.104, 120), (-129.304, 120.104, 120), (-131.304, 120.104, 120), (-133.304, 120.104, 120), (-135.304, 120.104, 120), (-137.304, 120.104, 120), (-139.304, 120.104, 120), (-141.304, 120.104, 120), (-143.304, 120.104, 120), (-145.304, 120.104, 120), (-147.304, 120.104, 120), (-149.562, 120.104, 120, 0), (-149.562, 120.104, 0, 0)]

#-----------------------------------------------------------------------------------------------------------------------------------------------------
#SKILLS
# pathfile: alliance_stake.txt
alliance_stake = [(-155.217, 3.557, 120, 0), (-153.217, 3.557, 120), (-151.217, 3.557, 120), (-149.217, 3.557, 120), (-147.217, 3.557, 120), (-145.217, 3.557, 120), (-143.217, 3.557, 120), (-141.217, 3.557, 120), (-139.217, 3.557, 120), (-137.217, 3.557, 120), (-135.217, 3.557, 120), (-133.217, 3.557, 120), (-131.217, 3.557, 120), (-129.217, 3.557, 120), (-127.217, 3.557, 120), (-125.217, 3.557, 120), (-123.217, 3.557, 120), (-121.217, 3.557, 120), (-119.217, 3.557, 120), (-117.217, 3.557, 120), (-115.217, 3.557, 120), (-113.217, 3.557, 120), (-111.217, 3.557, 120), (-110.509, 3.557, 120, 0), (-110.509, 3.557, 0, 0)]
#alliance stake changed because it was bumping into the hanging wall and we made it shorter
# pathfile: grabbing_mogo.txt
grabbing_mogo = [(-119.509, 3.557, 120, 0), (-119.505, 5.557, 120), (-119.501, 7.557, 120), (-119.497, 9.557, 120), (-119.493, 11.557, 120), (-119.489, 13.557, 120), (-119.485, 15.557, 120), (-119.481, 17.557, 120), (-119.476, 19.557, 120), (-119.472, 21.557, 120), (-119.468, 23.557, 120), (-119.464, 25.557, 120), (-119.46, 27.557, 120), (-119.456, 29.557, 120), (-119.452, 31.557, 120), (-119.448, 33.557, 120), (-119.444, 35.557, 120), (-119.44, 37.557, 120), (-119.436, 39.557, 120), (-119.432, 41.557, 120), (-119.428, 43.557, 120), (-119.424, 45.557, 120), (-119.42, 47.557, 120), (-119.415, 49.557, 120), (-119.411, 51.557, 120), (-119.407, 53.557, 120), (-119.403, 55.557, 120), (-119.399, 57.557, 120), (-119.395, 59.557, 120), (-119.391, 61.557, 120), (-119.387, 63.557, 120), (-119.384, 65.028, 120, 0), (-119.384, 65.028, 0, 0)]


p1v2 = [(-159.385, 0.0), (-157.385, 0.0), (-155.385, 0.0), (-153.385, 0.0), (-151.385, 0.0), (-149.385, 0.0), (-147.385, 0.0), (-145.385, 0.0), (-143.385, 0.0), (-141.385, 0.0), (-139.385, 0.0), (-137.385, 0.0), (-135.385, 0.0), (-133.385, 0.0), (-131.385, 0.0)]

mogo_in_possession_1v2 = [(-119.894, 0.0), (-119.894, 2.0), (-119.894, 4.0), (-119.894, 6.0), (-119.894, 8.0), (-119.894, 10.0), (-119.894, 12.0), (-119.894, 14.0), (-119.894, 16.0), (-119.894, 18.0), (-119.894, 20.0), (-119.894, 22.0), (-119.894, 24.0), (-119.894, 26.0), (-119.894, 28.0), (-119.894, 30.0), (-119.894, 32.0), (-119.894, 34.0), (-119.894, 36.0), (-119.894, 38.0), (-119.894, 40.0), (-119.894, 42.0), (-119.894, 44.0), (-119.894, 46.0), (-119.894, 48.0), (-119.894, 50.0), (-119.894, 52.0), (-119.894, 54.0), (-119.894, 56.0), (-119.894, 58.0), (-119.894, 60.0), (-119.894, 62.0), (-119.894, 64.0), (-119.894, 66.0), (-119.894, 68.0), (-119.894, 70.0)]



first_double_donuts = [(-119.345, 59.459), (-117.346, 59.529), (-115.347, 59.599), (-113.349, 59.669), (-111.35, 59.738), (-109.351, 59.808), (-107.352, 59.878), (-105.354, 59.948), (-103.355, 60.018), (-101.356, 60.088), (-99.357, 60.158), (-97.358, 60.228), (-95.36, 60.298), (-93.361, 60.368), (-91.362, 60.438), (-89.363, 60.508), (-87.365, 60.578), (-85.366, 60.648), (-83.367, 60.718), (-81.368, 60.788), (-79.369, 60.858), (-77.371, 60.928), (-75.372, 60.998), (-73.373, 61.068), (-71.374, 61.138), (-69.376, 61.208), (-67.377, 61.278), (-65.378, 61.348), (-63.379, 61.418), (-61.38, 61.488), (-59.382, 61.558), (-57.383, 61.628), (-55.384, 61.698), (-53.385, 61.768), (-51.387, 61.838), (-49.682, 62.761), (-48.065, 63.938), (-46.449, 65.116), (-44.834, 66.295), (-43.221, 67.478), (-41.611, 68.665), (-40.004, 69.856), (-38.403, 71.054), (-36.808, 72.261), (-35.22, 73.477), (-33.641, 74.704), (-32.074, 75.946), (-30.519, 77.204), (-28.979, 78.481), (-27.457, 79.778), (-25.955, 81.099), (-24.477, 82.446), (-23.024, 83.821), (-21.601, 85.226), (-20.21, 86.663), (-18.854, 88.133), (-17.536, 89.637), (-16.257, 91.175), (-15.02, 92.746), (-13.826, 94.35), (-12.673, 95.985), (-11.563, 97.648), (-10.496, 99.34), (-9.469, 101.056), (-8.48, 102.794), (-7.53, 104.554), (-6.613, 106.331), (-5.73, 108.126), (-4.876, 109.934), (-4.051, 111.756), (-3.252, 113.59), (-2.477, 115.433), (-1.724, 117.286), (-0.99, 119.147), (-0.276, 121.015), (0.422, 122.889), (0.605, 124.856), (0.604, 126.856), (0.602, 128.856), (0.601, 130.856), (0.599, 132.856), (0.597, 134.856), (0.596, 136.856), (0.594, 138.856), (0.592, 140.856), (0.591, 142.856), (0.59, 144.383), (0.59, 144.383)]

robot_rotation = [(0.012, 144.687), (0.019, 142.687), (0.026, 140.687), (0.033, 138.687), (0.04, 136.687), (0.047, 134.687), (0.054, 132.687), (0.061, 130.687), (0.068, 128.687), (0.075, 126.687), (0.082, 124.687), (0.089, 122.687), (0.097, 120.687), (0.104, 118.687), (0.111, 116.687), (0.118, 114.687), (0.125, 112.687), (0.132, 110.687), (0.139, 108.687), (0.146, 106.687), (0.152, 104.925), (0.152, 104.925)]

first_last_four_donuts = [(-14.134, 117.4), (-16.133, 117.35), (-18.132, 117.299), (-20.132, 117.249), (-22.131, 117.198), (-24.13, 117.148), (-26.13, 117.097), (-28.129, 117.047), (-30.129, 116.996), (-32.128, 116.946), (-34.127, 116.895), (-36.127, 116.845), (-38.126, 116.794), (-40.125, 116.744), (-42.125, 116.693), (-44.124, 116.643), (-46.123, 116.592), (-48.123, 116.542), (-50.122, 116.491), (-52.122, 116.441), (-54.121, 116.39), (-56.12, 116.34), (-58.12, 116.289), (-60.119, 116.239), (-62.118, 116.188), (-64.118, 116.138), (-66.117, 116.087), (-68.116, 116.034), (-70.116, 115.976), (-72.115, 115.921), (-74.114, 115.868), (-76.113, 115.817), (-78.113, 115.769), (-80.112, 115.723), (-82.112, 115.681), (-84.111, 115.641), (-86.111, 115.606), (-88.111, 115.574), (-90.111, 115.546), (-92.111, 115.522), (-94.11, 115.504), (-96.11, 115.491), (-98.11, 115.484), (-100.11, 115.484), (-102.11, 115.492), (-104.11, 115.509), (-106.11, 115.537), (-108.11, 115.577), (-110.109, 115.632), (-112.108, 115.704), (-114.105, 115.798), (-116.102, 115.92), (-118.096, 116.076), (-120.086, 116.274), (-122.07, 116.52), (-124.051, 116.801), (-126.031, 117.077), (-128.019, 117.296), (-130.014, 117.444), (-132.012, 117.532), (-134.011, 117.575), (-136.011, 117.584), (-138.011, 117.568), (-140.011, 117.534), (-142.01, 117.485), (-144.009, 117.424), (-146.008, 117.354), (-148.006, 117.275), (-150.005, 117.189), (-152.003, 117.098), (-154.0, 117.002), (-156.737, 116.863), (-156.737, 116.863)]


mogo_triangle =  [(-154.663, 118.262), (-153.485, 116.646), (-152.307, 115.03), (-151.129, 113.413), (-149.951, 111.797), (-148.773, 110.18), (-147.595, 108.564), (-146.418, 106.948), (-145.24, 105.331), (-144.062, 103.715), (-142.884, 102.099), (-141.706, 100.482), (-140.528, 98.866), (-139.35, 97.25), (-138.173, 95.633), (-136.995, 94.017), (-135.817, 92.4), (-134.639, 90.784), (-133.461, 89.168), (-132.283, 87.551), (-131.105, 85.935), (-129.927, 84.319), (-128.75, 82.702), (-127.572, 81.086), (-126.394, 79.47), (-125.216, 77.853), (-124.038, 76.237), (-122.86, 74.62), (-121.682, 73.004), (-120.505, 71.388), (-119.327, 69.771), (-118.149, 68.155), (-116.971, 66.539), (-115.793, 64.922), (-114.615, 63.306), (-113.437, 61.689), (-112.26, 60.073), (-111.082, 58.457), (-109.904, 56.84), (-108.726, 55.224), (-107.548, 53.608), (-106.37, 51.991), (-105.192, 50.375), (-104.015, 48.759), (-102.764, 47.042), (-102.764, 47.042)]

mogo_triangle_2 = [(-103.05, 45.734), (-103.987, 47.501), (-104.925, 49.267), (-105.863, 51.034), (-106.801, 52.8), (-107.739, 54.567), (-108.677, 56.333), (-109.615, 58.1), (-110.553, 59.866), (-111.491, 61.632), (-112.429, 63.399), (-113.366, 65.165), (-114.304, 66.932), (-115.242, 68.698), (-116.18, 70.465), (-117.118, 72.231), (-118.056, 73.998), (-118.994, 75.764), (-119.932, 77.531), (-120.87, 79.297), (-121.808, 81.063), (-122.745, 82.83), (-123.683, 84.596), (-124.621, 86.363), (-125.559, 88.129), (-126.497, 89.896), (-127.435, 91.662), (-128.373, 93.429), (-129.311, 95.195), (-130.249, 96.961), (-131.187, 98.728), (-132.124, 100.494), (-133.062, 102.261), (-134.0, 104.027), (-134.938, 105.794), (-135.876, 107.56), (-136.814, 109.327), (-137.752, 111.093), (-138.69, 112.86), (-139.628, 114.626), (-140.566, 116.392), (-141.503, 118.159), (-142.441, 119.925), (-143.379, 121.692), (-144.317, 123.458), (-145.255, 125.225), (-146.193, 126.991), (-147.131, 128.758), (-148.069, 130.524), (-149.007, 132.29), (-149.945, 134.057), (-151.261, 136.536), (-151.261, 136.536)]


corner_to_mogo = [(-160.86, 161.306), (-160.369, 159.367), (-159.879, 157.428), (-159.388, 155.489), (-158.898, 153.55), (-158.407, 151.611), (-157.917, 149.672), (-157.426, 147.733), (-156.936, 145.795), (-156.445, 143.856), (-155.955, 141.917), (-155.464, 139.978), (-154.974, 138.039), (-154.483, 136.1), (-153.993, 134.161), (-153.502, 132.222), (-153.012, 130.283), (-152.521, 128.344), (-152.031, 126.405), (-151.54, 124.466), (-151.05, 122.528), (-150.559, 120.589), (-150.069, 118.65), (-149.578, 116.711), (-149.088, 114.772), (-148.597, 112.833), (-148.107, 110.894), (-147.616, 108.955), (-147.126, 107.016), (-146.635, 105.077), (-146.145, 103.138), (-145.654, 101.199), (-145.164, 99.261), (-144.673, 97.322), (-144.183, 95.383), (-143.692, 93.444), (-143.202, 91.505), (-142.711, 89.566), (-142.221, 87.627), (-141.73, 85.688), (-141.24, 83.749), (-140.749, 81.81), (-140.259, 79.871), (-139.768, 77.932), (-139.278, 75.994), (-138.787, 74.055), (-138.297, 72.116), (-137.806, 70.177), (-137.316, 68.238), (-136.825, 66.299), (-136.335, 64.36), (-135.844, 62.421), (-135.354, 60.482), (-134.863, 58.543), (-134.373, 56.604), (-133.882, 54.665), (-133.391, 52.727), (-132.939, 50.939), (-132.939, 50.939)]

turn_to_mogo = [(-126.727, 57.152), (-126.617, 55.155), (-126.506, 53.158), (-126.396, 51.161), (-126.285, 49.164), (-126.175, 47.167), (-126.064, 45.17), (-125.953, 43.173), (-125.843, 41.176), (-125.732, 39.179), (-125.622, 37.182), (-125.511, 35.185), (-125.401, 33.188), (-125.29, 31.191), (-125.18, 29.194), (-125.069, 27.197), (-124.958, 25.2), (-124.848, 23.203), (-124.737, 21.207), (-124.627, 19.21), (-124.516, 17.213), (-124.406, 15.216), (-124.295, 13.219), (-124.185, 11.222), (-124.074, 9.225), (-123.963, 7.228), (-123.853, 5.231), (-123.742, 3.234), (-123.632, 1.237), (-123.521, -0.76), (-123.411, -2.757), (-123.3, -4.754), (-123.19, -6.751), (-123.079, -8.748), (-122.968, -10.745), (-122.858, -12.741), (-122.747, -14.738), (-122.637, -16.735), (-122.526, -18.732), (-122.416, -20.729), (-122.305, -22.726), (-122.195, -24.723), (-122.084, -26.72), (-121.974, -28.717), (-121.863, -30.714), (-121.752, -32.711), (-121.642, -34.708), (-121.531, -36.705), (-121.421, -38.702), (-121.31, -40.699), (-121.2, -42.696), (-121.089, -44.693), (-120.979, -46.689), (-120.868, -48.686), (-120.757, -50.683), (-120.647, -52.68), (-120.536, -54.677), (-120.426, -56.674), (-120.27, -59.484), (-120.27, -59.484)]

 
#pathfile: collect_right_bottom_rings.txt
collect_right_bottom_rings =  [(-120.515, -79.515), (-118.924, -78.304), (-117.332, -77.092), (-115.741, -75.881), (-114.15, -74.669), (-112.558, -73.458), (-110.967, -72.246), (-109.376, -71.035), (-107.784, -69.823), (-106.193, -68.612), (-104.601, -67.401), (-103.01, -66.189), (-101.419, -64.978), (-99.827, -63.766), (-98.236, -62.555), (-96.645, -61.343), (-95.053, -60.132), (-93.462, -58.92), (-91.871, -57.709), (-90.279, -56.498), (-88.688, -55.286), (-87.097, -54.075), (-85.505, -52.863), (-83.914, -51.652), (-82.323, -50.44), (-80.731, -49.229), (-79.14, -48.017), (-77.549, -46.806), (-75.957, -45.595), (-74.366, -44.383), (-72.798, -44.95), (-71.236, -46.199), (-69.669, -47.442), (-68.097, -48.679), (-66.521, -49.91), (-64.939, -51.134), (-63.352, -52.351), (-61.76, -53.561), (-60.162, -54.764), (-58.558, -55.958), (-56.948, -57.145), (-55.331, -58.323), (-53.708, -59.491), (-52.079, -60.651), (-50.443, -61.801), (-48.799, -62.941), (-47.149, -64.071), (-45.491, -65.19), (-43.826, -66.297), (-42.152, -67.392), (-40.471, -68.476), (-38.782, -69.547), (-37.084, -70.603), (-35.378, -71.647), (-33.663, -72.676), (-31.939, -73.69), (-30.206, -74.689), (-28.465, -75.672), (-26.714, -76.638), (-24.954, -77.589), (-23.184, -78.521), (-21.406, -79.436), (-19.618, -80.332), (-17.821, -81.21), (-16.015, -82.069), (-14.2, -82.909), (-12.376, -83.729), (-10.543, -84.53), (-8.702, -85.311), (-6.853, -86.073), (-4.995, -86.814), (-3.13, -87.536), (-1.257, -88.238), (0.622, -88.922), (2.509, -89.586), (4.401, -90.232), (6.3, -90.859), (8.205, -91.469), (10.115, -92.063), (12.03, -92.639), (13.949, -93.201), (15.874, -93.747), (17.801, -94.281), (19.733, -94.799), (21.667, -95.307), (23.605, -95.801), (25.545, -96.286), (27.488, -96.76), (29.433, -97.226), (31.381, -97.682), (33.329, -98.132), (35.28, -98.574), (37.232, -99.011), (39.185, -99.442), (41.139, -99.868), (43.094, -100.291), (45.049, -100.71), (47.006, -101.126), (48.962, -101.539), (50.919, -101.951), (52.877, -102.362), (54.834, -102.772), (56.792, -103.181), (59.755, -103.801), (59.755, -103.801)]
#fefe
collect_left_bottom_rings = [(x, -y) for x, y, *_ in collect_right_bottom_rings]

#collect_right_bottom_rings2 = [(78.037, -126.338), (76.04, -126.448), (74.046, -126.6), (72.056, -126.795), (70.07, -127.03), (68.089, -127.31), (66.116, -127.636), (64.15, -128.002), (62.192, -128.407), (60.243, -128.858), (58.304, -129.348), (56.375, -129.874), (54.457, -130.443), (52.55, -131.045), (50.655, -131.683), (48.77, -132.354), (46.897, -133.054), (45.035, -133.785), (43.184, -134.54), (41.342, -135.321), (39.509, -136.121), (37.685, -136.941), (35.867, -137.775), (34.055, -138.621), (32.247, -139.475), (30.44, -140.333), (28.633, -141.191), (26.825, -142.045), (25.011, -142.888), (23.191, -143.717), (21.361, -144.523), (19.518, -145.301), (17.661, -146.042), (15.786, -146.739), (13.892, -147.38), (11.976, -147.955), (10.039, -148.453), (8.081, -148.86), (6.105, -149.164), (4.114, -149.354), (2.116, -149.419), (0.117, -149.351), (-1.872, -149.146), (-3.842, -148.804), (-5.784, -148.327), (-7.69, -147.722), (-9.554, -146.999), (-11.374, -146.17), (-13.148, -145.247), (-14.871, -144.232), (-16.55, -143.146), (-18.181, -141.988), (-19.773, -140.777), (-21.318, -139.509), (-22.828, -138.197), (-24.303, -136.846), (-25.742, -135.458), (-27.149, -134.037), (-28.528, -132.587), (-29.879, -131.113), (-31.205, -129.616), (-32.507, -128.098), (-33.787, -126.561), (-35.045, -125.007), (-36.285, -123.437), (-37.506, -121.853), (-38.71, -120.256), (-40.027, -118.905), (-42.027, -118.93), (-44.027, -118.955), (-46.027, -118.981), (-48.027, -119.006), (-50.026, -119.032), (-52.026, -119.057), (-54.026, -119.083), (-56.026, -119.108), (-58.026, -119.134), (-60.026, -119.159), (-62.025, -119.184), (-64.025, -119.21), (-66.025, -119.235), (-68.025, -119.261), (-70.025, -119.286), (-72.025, -119.312), (-74.024, -119.337), (-76.024, -119.363), (-78.024, -119.388), (-80.024, -119.413), (-82.024, -119.439), (-84.024, -119.464), (-86.024, -119.49), (-88.023, -119.515), (-90.023, -119.541), (-92.023, -119.566), (-94.023, -119.592), (-96.023, -119.617), (-98.023, -119.643), (-100.022, -119.668), (-102.022, -119.693), (-104.022, -119.719), (-106.022, -119.744), (-108.022, -119.77), (-110.022, -119.795), (-112.021, -119.821), (-114.021, -119.846), (-116.021, -119.872), (-118.021, -119.897), (-120.021, -119.922), (-122.021, -119.948), (-124.02, -119.973), (-126.02, -119.999), (-128.02, -120.024), (-130.02, -120.05), (-132.02, -120.075), (-134.02, -120.101), (-136.019, -120.126), (-138.019, -120.151), (-140.019, -120.177), (-142.019, -120.202), (-144.019, -120.228), (-146.019, -120.253), (-148.019, -120.279), (-150.018, -120.304), (-152.018, -120.33), (-154.018, -120.355)]
# pathfile: square.jerry.io.txt
test_square = [(-0.949, -137.545, 120, 0), (1.05, -137.464, 120), (3.048, -137.383, 120), (5.047, -137.302, 120), (7.045, -137.221, 120), (9.043, -137.14, 120), (11.042, -137.06, 120), (13.04, -136.979, 120), (15.038, -136.898, 120), (17.037, -136.817, 120), (19.035, -136.736, 120), (21.033, -136.655, 120), (23.032, -136.574, 120), (25.03, -136.493, 120), (27.028, -136.412, 120), (29.027, -136.331, 120), (31.025, -136.251, 120), (33.024, -136.17, 120), (35.022, -136.089, 120), (37.02, -136.008, 120), (39.019, -135.927, 120), (41.017, -135.846, 120), (43.015, -135.765, 120), (45.014, -135.684, 120), (47.012, -135.603, 120), (49.01, -135.522, 120), (51.009, -135.441, 120), (53.007, -135.361, 120), (55.006, -135.28, 120), (57.004, -135.199, 120), (59.002, -135.118, 120), (61.001, -135.037, 120), (62.999, -134.956, 120), (64.997, -134.875, 120), (66.996, -134.794, 120), (68.994, -134.713, 120), (70.992, -134.632, 120), (72.991, -134.551, 120), (74.989, -134.471, 120), (76.988, -134.39, 120), (78.986, -134.309, 120), (80.984, -134.228, 120), (82.983, -134.147, 120), (84.981, -134.066, 120), (86.979, -133.985, 120), (88.978, -133.904, 120), (90.976, -133.823, 120), (92.974, -133.742, 120), (94.973, -133.662, 120), (96.971, -133.581, 120), (98.97, -133.5, 120), (100.968, -133.419, 120), (102.966, -133.338, 120), (104.965, -133.257, 120), (106.963, -133.176, 120), (108.961, -133.095, 120), (110.96, -133.014, 120), (112.958, -132.933, 120), (114.956, -132.852, 120), (116.2, -132.048, 120, 0), (116.197, -130.048, 120), (116.193, -128.048, 120), (116.189, -126.048, 120), (116.185, -124.048, 120), (116.182, -122.048, 120), (116.178, -120.048, 120), (116.174, -118.048, 120), (116.17, -116.048, 120), (116.166, -114.048, 120), (116.163, -112.048, 120), (116.159, -110.048, 120), (116.155, -108.048, 120), (116.151, -106.048, 120), (116.148, -104.048, 120), (116.144, -102.048, 120), (116.14, -100.048, 120), (116.136, -98.048, 120), (116.132, -96.048, 120), (116.129, -94.048, 120), (116.125, -92.048, 120), (116.121, -90.048, 120), (116.117, -88.048, 120), (116.114, -86.048, 120), (116.11, -84.049, 120), (116.106, -82.049, 120), (116.102, -80.049, 120), (116.098, -78.049, 120), (116.095, -76.049, 120), (116.091, -74.049, 120), (116.087, -72.049, 120), (116.083, -70.049, 120), (116.08, -68.049, 120), (116.076, -66.049, 120), (116.072, -64.049, 120), (116.068, -62.049, 120), (116.065, -60.049, 120), (116.061, -58.049, 120), (116.057, -56.049, 120), (116.053, -54.049, 120), (116.049, -52.049, 120), (116.046, -50.049, 120), (116.042, -48.049, 120), (116.038, -46.049, 120), (116.034, -44.049, 120), (116.031, -42.049, 120), (116.027, -40.049, 120), (116.023, -38.049, 120), (116.019, -36.049, 120), (116.015, -34.049, 120), (116.012, -32.049, 120), (116.008, -30.049, 120), (116.004, -28.049, 120), (116.0, -26.049, 120), (115.997, -24.049, 120), (115.993, -22.049, 120), (115.989, -20.049, 120), (115.985, -18.049, 120), (115.982, -16.049, 120), (115.978, -14.049, 120), (115.974, -12.049, 120), (115.97, -10.049, 120), (115.966, -8.049, 120), (115.963, -6.049, 120), (115.959, -4.049, 120), (115.955, -2.049, 120), (115.951, -0.049, 120), (115.948, 1.951, 120), (115.944, 3.951, 120), (115.94, 5.951, 120), (115.936, 7.951, 120), (115.932, 9.951, 120), (115.929, 11.951, 120), (115.925, 13.951, 120), (115.921, 15.951, 120), (115.917, 17.951, 120), (115.914, 19.951, 120), (115.91, 21.951, 120), (115.906, 23.951, 120), (115.902, 25.951, 120), (115.898, 27.951, 120), (115.895, 29.951, 120), (115.891, 31.951, 120), (115.887, 33.951, 120), (115.883, 35.951, 120), (115.88, 37.951, 120), (115.876, 39.951, 120), (115.872, 41.951, 120), (115.868, 43.951, 120), (115.865, 45.951, 120), (115.861, 47.951, 120), (115.857, 49.951, 120), (115.853, 51.951, 120), (115.849, 53.951, 120), (115.846, 55.951, 120), (115.842, 57.951, 120), (115.838, 59.951, 120), (115.834, 61.951, 120), (115.831, 63.951, 120), (115.827, 65.951, 120), (115.823, 67.951, 120), (115.819, 69.951, 120), (115.815, 71.951, 120), (115.812, 73.951, 120), (115.808, 75.951, 120), (115.804, 77.951, 120), (115.8, 79.951, 120), (115.797, 81.951, 120), (115.793, 83.951, 120), (115.789, 85.951, 120), (115.785, 87.951, 120), (115.782, 89.951, 120), (115.778, 91.951, 120), (115.774, 93.951, 120), (115.77, 95.951, 120), (115.766, 97.951, 120), (115.763, 99.951, 120), (115.759, 101.951, 120), (115.755, 103.951, 120), (115.751, 105.951, 120), (115.748, 107.951, 120), (115.744, 109.951, 120), (115.74, 111.951, 120), (115.736, 113.951, 120), (115.732, 115.951, 120), (115.729, 117.951, 120, 0), (114.35, 118.593, 120), (112.35, 118.622, 120), (110.35, 118.651, 120), (108.35, 118.679, 120), (106.351, 118.708, 120), (104.351, 118.737, 120), (102.351, 118.766, 120), (100.351, 118.794, 120), (98.351, 118.823, 120), (96.352, 118.852, 120), (94.352, 118.881, 120), (92.352, 118.909, 120), (90.352, 118.938, 120), (88.352, 118.967, 120), (86.353, 118.995, 120), (84.353, 119.024, 120), (82.353, 119.053, 120), (80.353, 119.082, 120), (78.353, 119.11, 120), (76.354, 119.139, 120), (74.354, 119.168, 120), (72.354, 119.197, 120), (70.354, 119.225, 120), (68.355, 119.254, 120), (66.355, 119.283, 120), (64.355, 119.312, 120), (62.355, 119.34, 120), (60.355, 119.369, 120), (58.356, 119.398, 120), (56.356, 119.427, 120), (54.356, 119.455, 120), (52.356, 119.484, 120), (50.356, 119.513, 120), (48.357, 119.542, 120), (46.357, 119.57, 120), (44.357, 119.599, 120), (42.357, 119.628, 120), (40.357, 119.657, 120), (38.358, 119.685, 120), (36.358, 119.714, 120), (34.358, 119.743, 120), (32.358, 119.772, 120), (30.358, 119.8, 120), (28.359, 119.829, 120), (26.359, 119.858, 120), (24.359, 119.887, 120), (22.359, 119.915, 120), (20.359, 119.944, 120), (18.36, 119.973, 120), (16.36, 120.002, 120), (14.36, 120.03, 120), (12.36, 120.059, 120), (10.361, 120.088, 120), (8.361, 120.117, 120), (6.361, 120.145, 120), (4.361, 120.174, 120), (2.361, 120.203, 120), (0.362, 120.232, 120), (-1.638, 120.26, 120), (-3.638, 120.289, 120), (-5.638, 120.318, 120), (-7.638, 120.346, 120), (-9.637, 120.375, 120), (-11.637, 120.404, 120), (-13.637, 120.433, 120), (-15.637, 120.461, 120), (-17.637, 120.49, 120), (-19.636, 120.519, 120), (-21.636, 120.548, 120), (-23.636, 120.576, 120), (-25.636, 120.605, 120), (-27.636, 120.634, 120), (-29.635, 120.663, 120), (-31.635, 120.691, 120), (-33.635, 120.72, 120), (-35.635, 120.749, 120), (-37.635, 120.778, 120), (-39.634, 120.806, 120), (-41.634, 120.835, 120), (-43.634, 120.864, 120), (-45.634, 120.893, 120), (-47.633, 120.921, 120), (-49.633, 120.95, 120), (-51.633, 120.979, 120), (-53.633, 121.008, 120), (-55.633, 121.036, 120), (-57.632, 121.065, 120), (-59.632, 121.094, 120), (-61.632, 121.123, 120), (-63.632, 121.151, 120), (-65.632, 121.18, 120), (-67.631, 121.209, 120), (-69.631, 121.238, 120), (-71.631, 121.266, 120), (-73.631, 121.295, 120), (-75.631, 121.324, 120), (-77.63, 121.353, 120), (-79.63, 121.381, 120), (-81.63, 121.41, 120), (-83.63, 121.439, 120), (-85.63, 121.468, 120), (-87.629, 121.496, 120), (-89.629, 121.525, 120), (-91.629, 121.554, 120), (-93.629, 121.582, 120), (-95.629, 121.611, 120), (-97.628, 121.64, 120), (-99.628, 121.669, 120), (-101.628, 121.697, 120), (-103.628, 121.726, 120), (-105.628, 121.755, 120), (-107.627, 121.784, 120), (-109.627, 121.812, 120), (-111.627, 121.841, 120), (-113.627, 121.87, 120, 0), (-115.26, 121.52, 120), (-115.297, 119.52, 120), (-115.334, 117.521, 120), (-115.371, 115.521, 120), (-115.408, 113.521, 120), (-115.445, 111.522, 120), (-115.482, 109.522, 120), (-115.519, 107.522, 120), (-115.556, 105.523, 120), (-115.593, 103.523, 120), (-115.63, 101.524, 120), (-115.667, 99.524, 120), (-115.704, 97.524, 120), (-115.741, 95.525, 120), (-115.778, 93.525, 120), (-115.815, 91.525, 120), (-115.852, 89.526, 120), (-115.888, 87.526, 120), (-115.925, 85.526, 120), (-115.962, 83.527, 120), (-115.999, 81.527, 120), (-116.036, 79.527, 120), (-116.073, 77.528, 120), (-116.11, 75.528, 120), (-116.147, 73.528, 120), (-116.184, 71.529, 120), (-116.221, 69.529, 120), (-116.258, 67.529, 120), (-116.295, 65.53, 120), (-116.332, 63.53, 120), (-116.369, 61.53, 120), (-116.406, 59.531, 120), (-116.443, 57.531, 120), (-116.48, 55.531, 120), (-116.517, 53.532, 120), (-116.554, 51.532, 120), (-116.591, 49.532, 120), (-116.628, 47.533, 120), (-116.665, 45.533, 120), (-116.702, 43.533, 120), (-116.739, 41.534, 120), (-116.776, 39.534, 120), (-116.813, 37.534, 120), (-116.849, 35.535, 120), (-116.886, 33.535, 120), (-116.923, 31.535, 120), (-116.96, 29.536, 120), (-116.997, 27.536, 120), (-117.034, 25.536, 120), (-117.071, 23.537, 120), (-117.108, 21.537, 120), (-117.145, 19.538, 120), (-117.182, 17.538, 120), (-117.219, 15.538, 120), (-117.256, 13.539, 120), (-117.293, 11.539, 120), (-117.33, 9.539, 120), (-117.367, 7.54, 120), (-117.404, 5.54, 120), (-117.441, 3.54, 120), (-117.478, 1.541, 120), (-117.515, -0.459, 120), (-117.552, -2.459, 120), (-117.589, -4.458, 120), (-117.626, -6.458, 120), (-117.663, -8.458, 120), (-117.7, -10.457, 120), (-117.737, -12.457, 120), (-117.774, -14.457, 120), (-117.811, -16.456, 120), (-117.847, -18.456, 120), (-117.884, -20.456, 120), (-117.921, -22.455, 120), (-117.958, -24.455, 120), (-117.995, -26.455, 120), (-118.032, -28.454, 120), (-118.069, -30.454, 120), (-118.106, -32.454, 120), (-118.143, -34.453, 120), (-118.18, -36.453, 120), (-118.217, -38.453, 120), (-118.254, -40.452, 120), (-118.291, -42.452, 120), (-118.328, -44.452, 120), (-118.365, -46.451, 120), (-118.402, -48.451, 120), (-118.439, -50.451, 120), (-118.476, -52.45, 120), (-118.513, -54.45, 120), (-118.55, -56.45, 120), (-118.587, -58.449, 120), (-118.624, -60.449, 120), (-118.661, -62.448, 120), (-118.698, -64.448, 120), (-118.735, -66.448, 120), (-118.772, -68.447, 120), (-118.808, -70.447, 120), (-118.845, -72.447, 120), (-118.882, -74.446, 120), (-118.919, -76.446, 120), (-118.956, -78.446, 120), (-118.993, -80.445, 120), (-119.03, -82.445, 120), (-119.067, -84.445, 120), (-119.104, -86.444, 120), (-119.141, -88.444, 120), (-119.178, -90.444, 120), (-119.215, -92.443, 120), (-119.252, -94.443, 120), (-119.289, -96.443, 120), (-119.326, -98.442, 120), (-119.363, -100.442, 120), (-119.4, -102.442, 120), (-119.437, -104.441, 120), (-119.474, -106.441, 120), (-119.511, -108.441, 120), (-119.548, -110.44, 120), (-119.585, -112.44, 120), (-119.622, -114.44, 120), (-119.659, -116.439, 120), (-119.696, -118.439, 120), (-119.733, -120.439, 120), (-119.77, -122.438, 120), (-119.806, -124.438, 120), (-119.843, -126.438, 120), (-119.88, -128.437, 120), (-119.917, -130.437, 120), (-119.954, -132.437, 120, 0), (-119.991, -134.436, 120), (-118.259, -134.699, 120), (-116.259, -134.699, 120), (-114.259, -134.699, 120), (-112.259, -134.699, 120), (-110.259, -134.699, 120), (-108.259, -134.699, 120), (-106.259, -134.699, 120), (-104.259, -134.699, 120), (-102.259, -134.699, 120), (-100.259, -134.699, 120), (-98.259, -134.699, 120), (-96.259, -134.699, 120), (-94.259, -134.699, 120), (-92.259, -134.699, 120), (-90.259, -134.699, 120), (-88.259, -134.699, 120), (-86.259, -134.699, 120), (-84.259, -134.699, 120), (-82.259, -134.699, 120), (-80.259, -134.699, 120), (-78.259, -134.699, 120), (-76.259, -134.699, 120), (-74.259, -134.699, 120), (-72.259, -134.699, 120), (-70.259, -134.699, 120), (-68.259, -134.699, 120), (-66.259, -134.699, 120), (-64.259, -134.699, 120), (-62.259, -134.699, 120), (-60.259, -134.699, 120), (-58.259, -134.699, 120), (-56.259, -134.699, 120), (-54.259, -134.699, 120), (-52.259, -134.699, 120), (-50.259, -134.699, 120), (-48.259, -134.699, 120), (-46.259, -134.699, 120), (-44.259, -134.699, 120), (-42.259, -134.699, 120), (-40.259, -134.699, 120), (-38.259, -134.699, 120), (-36.259, -134.699, 120), (-34.259, -134.699, 120), (-32.259, -134.699, 120), (-30.259, -134.699, 120), (-28.259, -134.699, 120), (-26.259, -134.699, 120), (-24.259, -134.699, 120), (-22.259, -134.699, 120), (-19.92, -134.699, 120, 0), (-19.92, -134.699, 0, 0)]
# pathfile: toprightmogo_missing.txt    
toprightmogo2_missing = [(59.755, -104.801, 120, 0), (58.102, -105.927, 120), (56.419, -107.007, 120), (54.706, -108.039, 120), (52.962, -109.018, 120), (51.192, -109.949, 120), (49.398, -110.833, 120), (47.58, -111.667, 120), (45.741, -112.452, 120), (43.883, -113.192, 120), (42.007, -113.886, 120), (40.115, -114.533, 120), (38.209, -115.138, 120), (36.29, -115.702, 120), (34.359, -116.223, 120), (32.418, -116.705, 120), (30.468, -117.151, 120), (28.51, -117.559, 120), (26.546, -117.932, 120), (24.575, -118.274, 120), (22.599, -118.582, 120), (20.619, -118.861, 120), (18.634, -119.112, 120), (16.647, -119.334, 120), (14.657, -119.532, 120), (12.664, -119.706, 120), (10.67, -119.856, 120), (8.674, -119.985, 120), (6.677, -120.093, 120), (4.679, -120.183, 120), (2.68, -120.256, 120), (0.681, -120.311, 120), (-1.319, -120.352, 120), (-3.318, -120.378, 120), (-5.318, -120.392, 120), (-7.318, -120.394, 120), (-9.318, -120.386, 120), (-11.318, -120.368, 120), (-13.318, -120.341, 120), (-15.318, -120.308, 120), (-17.317, -120.267, 120), (-19.317, -120.222, 120), (-21.316, -120.172, 120), (-23.315, -120.12, 120), (-25.315, -120.065, 120), (-27.314, -120.009, 120), (-29.313, -119.952, 120), (-31.312, -119.897, 120), (-33.312, -119.844, 120), (-35.311, -119.794, 120), (-37.311, -119.749, 120), (-39.31, -119.709, 120), (-41.31, -119.675, 120), (-43.31, -119.649, 120), (-45.31, -119.632, 120), (-47.31, -119.626, 120), (-49.31, -119.631, 120), (-51.309, -119.648, 120), (-53.309, -119.681, 120), (-55.309, -119.729, 120), (-57.308, -119.794, 120), (-59.306, -119.879, 120, 0), (-61.305, -119.894, 120), (-63.305, -119.894, 120), (-65.305, -119.894, 120), (-67.305, -119.894, 120), (-69.305, -119.894, 120), (-71.305, -119.894, 120), (-73.305, -119.894, 120), (-75.305, -119.894, 120), (-77.305, -119.894, 120), (-79.305, -119.894, 120), (-81.305, -119.894, 120), (-83.305, -119.894, 120), (-85.305, -119.894, 120), (-87.305, -119.894, 120), (-89.305, -119.894, 120), (-91.305, -119.894, 120), (-93.305, -119.894, 120), (-95.305, -119.894, 120), (-97.305, -119.894, 120), (-99.305, -119.894, 120), (-101.305, -119.894, 120), (-103.305, -119.894, 120), (-105.305, -119.894, 120), (-107.305, -119.894, 120), (-109.305, -119.894, 120), (-111.305, -119.894, 120), (-113.305, -119.894, 120), (-115.305, -119.894, 120), (-117.305, -119.894, 120), (-119.305, -119.894, 120), (-121.305, -119.894, 120), (-123.305, -119.894, 120), (-125.305, -119.894, 120), (-127.305, -119.894, 120), (-129.305, -119.894, 120), (-131.305, -119.894, 120), (-133.305, -119.894, 120), (-135.305, -119.894, 120), (-137.305, -119.894, 120), (-139.305, -119.894, 120), (-141.305, -119.894, 120), (-143.305, -119.894, 120), (-145.364, -119.894, 120, 0), (-145.364, -119.894, 0, 0)]

# pathfile: collect_left_bottom_rings2.txt
collect_left_bottom_rings2 = [(58.696, 120.104, 120, 0), (56.701, 120.245, 120), (54.711, 120.447, 120), (52.729, 120.713, 120), (50.758, 121.05, 120), (48.8, 121.459, 120), (46.86, 121.942, 120), (44.939, 122.5, 120), (43.045, 123.141, 120), (41.179, 123.859, 120), (39.346, 124.66, 120), (37.549, 125.538, 120), (35.792, 126.493, 120), (34.078, 127.522, 120), (32.406, 128.62, 120), (30.777, 129.78, 120), (29.19, 130.997, 120), (27.642, 132.264, 120), (26.13, 133.573, 120), (24.648, 134.916, 120), (23.191, 136.285, 120), (21.749, 137.671, 120), (20.315, 139.066, 120), (18.88, 140.458, 120), (17.431, 141.837, 120), (15.959, 143.191, 120), (14.451, 144.505, 120), (12.897, 145.763, 120), (11.284, 146.945, 120), (9.606, 148.032, 120), (7.857, 149.002, 120), (6.039, 149.834, 120), (4.157, 150.511, 120), (2.224, 151.021, 120), (0.255, 151.364, 120, 0), (-1.654, 150.85, 120), (-3.509, 150.103, 120), (-5.307, 149.229, 120), (-7.04, 148.231, 120), (-8.701, 147.118, 120), (-10.288, 145.901, 120), (-11.8, 144.593, 120), (-13.242, 143.207, 120), (-14.622, 141.759, 120), (-15.947, 140.261, 120), (-17.23, 138.727, 120), (-18.482, 137.168, 120), (-19.719, 135.596, 120), (-20.953, 134.022, 120), (-22.199, 132.458, 120), (-23.473, 130.916, 120), (-24.79, 129.411, 120), (-26.163, 127.956, 120), (-27.607, 126.573, 120), (-29.131, 125.279, 120), (-30.743, 124.096, 120), (-32.444, 123.045, 120), (-34.228, 122.143, 120), (-36.085, 121.401, 120), (-37.998, 120.821, 120), (-39.954, 120.406, 120), (-41.936, 120.141, 120), (-43.932, 120.015, 120), (-45.931, 120.017, 120), (-47.929, 120.104, 120, 0), (-49.929, 120.104, 120), (-51.929, 120.104, 120), (-53.929, 120.104, 120), (-55.929, 120.104, 120), (-57.929, 120.104, 120), (-59.929, 120.104, 120), (-61.929, 120.104, 120), (-63.929, 120.104, 120), (-65.929, 120.104, 120), (-67.929, 120.104, 120), (-69.929, 120.104, 120), (-71.929, 120.104, 120), (-73.929, 120.104, 120), (-75.929, 120.104, 120), (-77.929, 120.104, 120), (-79.929, 120.104, 120), (-81.929, 120.104, 120), (-83.929, 120.104, 120), (-85.929, 120.104, 120), (-87.929, 120.104, 120), (-89.929, 120.104, 120), (-91.929, 120.104, 120), (-93.929, 120.104, 120), (-95.929, 120.104, 120), (-97.929, 120.104, 120), (-99.929, 120.104, 120), (-101.929, 120.104, 120), (-103.929, 120.104, 120), (-105.929, 120.104, 120), (-107.929, 120.104, 120), (-109.929, 120.104, 120), (-111.929, 120.104, 120), (-113.929, 120.104, 120), (-115.929, 120.104, 120), (-117.929, 120.104, 120), (-119.929, 120.104, 120), (-121.929, 120.104, 120), (-123.929, 120.104, 120), (-125.929, 120.104, 120), (-127.929, 120.104, 120), (-129.259, 120.104, 120, 0), (-129.259, 120.104, 0, 0)]

#mogo_to_corner = [(-160.167, -120.433), (-158.167, -120.433), (-156.167, -120.433), (-154.167, -120.433), (-152.167, -120.433), (-150.167, -120.433), (-148.167, -120.433), (-146.167, -120.433), (-144.167, -120.433), (-142.167, -120.433), (-140.167, -120.433), (-138.167, -120.433), (-136.167, -120.433), (-134.167, -120.433), (-132.167, -120.433), (-130.167, -120.433), (-128.167, -120.433), (-126.167, -120.433), (-124.167, -120.433), (-122.167, -120.433), (-120.167, -120.433), (-118.167, -120.433), (-116.167, -120.433), (-114.167, -120.433), (-112.167, -120.433), (-110.167, -120.433), (-108.167, -120.433), (-106.167, -120.433), (-104.167, -120.433), (-102.167, -120.433), (-100.167, -120.433), (-98.167, -120.433), (-96.167, -120.433), (-94.167, -120.433), (-92.167, -120.433), (-90.167, -120.433), (-88.167, -120.433), (-86.167, -120.433), (-84.167, -120.433), (-82.167, -120.433), (-80.167, -120.433), (-78.167, -120.433), (-76.167, -120.433), (-74.167, -120.433), (-72.167, -120.433), (-70.167, -120.433), (-68.167, -120.433), (-66.167, -120.433), (-64.167, -120.433), (-62.167, -120.433), (-60.167, -120.433), (-58.167, -120.433), (-56.167, -120.433), (-54.167, -120.433), (-52.167, -120.433), (-50.167, -120.433), (-48.167, -120.433), (-46.167, -120.433), (-44.167, -120.433), (-42.167, -120.433), (-40.167, -120.433), (-38.167, -120.433), (-36.346, -120.433), (-36.346, -120.433)]
# Optimized Path   
mogo_to_corner = [(-160.167, -120.433), (-158.167, -120.433), (-156.167, -120.433), (-154.167, -120.433), (-152.167, -120.433), (-150.167, -120.433), (-148.167, -120.433), (-146.167, -120.433), (-144.167, -120.433), (-142.167, -120.433), (-140.167, -120.433), (-138.167, -120.433), (-136.167, -120.433), (-134.167, -120.433), (-132.167, -120.433), (-130.167, -120.433), (-128.167, -120.433), (-126.167, -120.433), (-124.167, -120.433), (-122.167, -120.433), (-120.167, -120.433), (-118.167, -120.433), (-116.167, -120.433), (-114.167, -120.433), (-112.167, -120.433), (-110.167, -120.433), (-108.167, -120.433), (-106.167, -120.433), (-104.167, -120.433), (-102.167, -120.433), (-100.167, -120.433), (-98.167, -120.433), (-96.167, -120.433), (-94.167, -120.433), (-92.167, -120.433), (-90.167, -120.433), (-88.167, -120.433), (-86.167, -120.433), (-84.167, -120.433), (-82.167, -120.433), (-80.167, -120.433), (-78.167, -120.433), (-76.167, -120.433)]



# pathfile: mogo_to_left_corner.txt     
mogo_to_left_corner = [(-129.259, 120.104, 120, 0), (-127.877, 118.658, 120), (-126.495, 117.213, 120), (-125.113, 115.767, 120), (-123.731, 114.321, 120), (-122.349, 112.875, 120), (-120.967, 111.43, 120), (-119.585, 109.984, 120), (-118.203, 108.538, 120), (-116.821, 107.092, 120), (-115.439, 105.647, 120), (-114.057, 104.201, 120), (-112.675, 102.755, 120), (-111.293, 101.309, 120), (-109.911, 99.864, 120), (-108.53, 98.418, 120), (-107.148, 96.972, 120), (-105.766, 95.526, 120), (-104.384, 94.081, 120), (-103.002, 92.635, 120), (-101.62, 91.189, 120), (-100.238, 89.743, 120), (-98.856, 88.298, 120), (-97.474, 86.852, 120), (-96.092, 85.406, 120), (-94.63, 83.876, 120, 0), (-94.63, 83.876, 0, 0)]

bottom_right_mogo = [(-152.818, -151.576), (-152.659, -149.582), (-152.499, -147.588), (-152.34, -145.595), (-152.18, -143.601), (-152.021, -141.608), (-151.861, -139.614), (-151.702, -137.62), (-151.542, -135.627), (-151.383, -133.633), (-151.223, -131.639), (-151.064, -129.646), (-150.904, -127.652), (-150.745, -125.659), (-150.585, -123.665), (-150.426, -121.671), (-149.494, -120.481), (-147.495, -120.401), (-145.497, -120.32), (-143.499, -120.239), (-141.5, -120.159), (-139.502, -120.078), (-137.504, -119.997), (-135.505, -119.917), (-133.507, -119.836), (-131.508, -119.755), (-129.51, -119.675), (-127.512, -119.594), (-125.513, -119.513), (-123.515, -119.433), (-121.517, -119.352), (-119.518, -119.271), (-117.52, -119.191), (-115.522, -119.11), (-113.523, -119.03), (-111.525, -118.949), (-109.526, -118.868), (-107.528, -118.788), (-105.53, -118.707), (-103.531, -118.626), (-101.533, -118.546), (-99.535, -118.465), (-97.536, -118.384), (-95.538, -118.304), (-93.539, -118.223), (-91.541, -118.142), (-89.543, -118.062), (-87.544, -117.981), (-85.546, -117.9), (-83.548, -117.82), (-81.549, -117.739), (-79.551, -117.658), (-77.552, -117.578), (-75.554, -117.497), (-73.556, -117.417), (-71.557, -117.336), (-69.559, -117.255), (-67.561, -117.175), (-65.562, -117.094), (-63.564, -117.013), (-61.565, -116.933), (-59.567, -116.852), (-57.569, -116.771), (-55.57, -116.691), (-53.572, -116.61), (-51.574, -116.529), (-49.575, -116.449), (-47.577, -116.368), (-45.578, -116.287), (-43.58, -116.207), (-41.582, -116.126), (-39.583, -116.045), (-37.585, -115.965), (-35.587, -115.884), (-33.588, -115.803), (-31.59, -115.723), (-29.591, -115.642), (-27.593, -115.562), (-25.595, -115.481), (-23.596, -115.4), (-21.598, -115.32), (-19.6, -115.239), (-17.601, -115.158), (-15.603, -115.078), (-13.604, -114.997), (-11.803, -114.924), (-11.803, -114.924)]
 

#mogo_to_corner2 =  [(-36.346, -120.433), (-38.152, -119.575), (-39.963, -118.725), (-41.777, -117.884), (-43.597, -117.054), (-45.422, -116.236), (-47.251, -115.428), (-49.086, -114.631), (-50.926, -113.848), (-52.772, -113.08), (-54.624, -112.324), (-56.482, -111.583), (-58.345, -110.856), (-60.215, -110.145), (-62.091, -109.454), (-63.975, -108.781), (-65.865, -108.127), (-67.761, -107.493), (-69.665, -106.881), (-71.577, -106.292), (-73.495, -105.727), (-75.421, -105.189), (-77.355, -104.679), (-79.297, -104.199), (-81.246, -103.75), (-83.202, -103.336), (-85.166, -102.957), (-87.137, -102.621), (-89.116, -102.328), (-91.1, -102.08), (-93.09, -101.878), (-95.084, -101.73), (-97.082, -101.642), (-99.082, -101.611), (-101.081, -101.647), (-103.079, -101.752), (-105.07, -101.929), (-107.054, -102.186), (-109.025, -102.524), (-110.98, -102.945), (-112.912, -103.459), (-114.82, -104.058), (-116.697, -104.749), (-118.536, -105.533), (-120.336, -106.404), (-122.093, -107.36), (-123.8, -108.402), (-125.457, -109.522), (-127.063, -110.713), (-128.618, -111.97), (-130.119, -113.292), (-131.57, -114.668), (-132.973, -116.093), (-134.328, -117.564), (-135.638, -119.076), (-136.908, -120.62), (-138.137, -122.197), (-139.332, -123.801), (-140.495, -125.429), (-141.626, -127.078), (-142.732, -128.744), (-143.812, -130.428), (-144.871, -132.124), (-145.91, -133.833), (-146.933, -135.552), (-147.941, -137.279), (-148.936, -139.014), (-149.921, -140.755), (-150.896, -142.501), (-151.864, -144.251), (-152.827, -146.004), (-153.785, -147.759), (-154.741, -149.516)]
# Optimized Path
# pathfile: mogo_to_corner_2.txt
mogo_to_corner2 = [(-110.51, -106.242, 120, 0), (-112.219, -107.281, 120), (-113.91, -108.349, 120), (-115.579, -109.45, 120), (-117.225, -110.587, 120), (-118.843, -111.763, 120), (-120.429, -112.98, 120), (-121.981, -114.242, 120), (-123.493, -115.551, 120), (-124.964, -116.906, 120), (-126.39, -118.308, 120), (-127.774, -119.751, 120), (-129.121, -121.23, 120), (-130.441, -122.732, 120), (-131.75, -124.245, 120), (-133.065, -125.752, 120), (-134.405, -127.237, 120), (-135.784, -128.685, 120), (-137.213, -130.084, 120), (-138.694, -131.427, 120), (-140.227, -132.711, 120), (-141.808, -133.937, 120), (-143.431, -135.105, 120), (-145.091, -136.221, 120), (-146.782, -137.288, 120), (-148.501, -138.311, 120), (-150.243, -139.294, 120), (-152.004, -140.241, 120), (-154.145, -141.339, 120, 0), (-154.145, -141.339, 0, 0)]

# pathfile: mogo_to_left_corner2.txt
mogo_to_left_corner2 = [(-94.63, 83.876, 120, 0), (-95.788, 85.506, 120), (-96.947, 87.136, 120), (-98.106, 88.766, 120), (-99.265, 90.396, 120), (-100.424, 92.026, 120), (-101.583, 93.657, 120), (-102.742, 95.287, 120), (-103.901, 96.917, 120), (-105.06, 98.547, 120), (-106.219, 100.177, 120), (-107.377, 101.807, 120), (-108.536, 103.437, 120), (-109.695, 105.067, 120), (-110.854, 106.697, 120), (-112.013, 108.327, 120), (-113.172, 109.957, 120), (-114.331, 111.587, 120), (-115.49, 113.217, 120), (-116.649, 114.847, 120), (-117.807, 116.477, 120), (-118.966, 118.107, 120), (-120.125, 119.737, 120), (-121.284, 121.367, 120), (-122.443, 122.997, 120), (-123.602, 124.627, 120), (-124.761, 126.257, 120), (-125.92, 127.887, 120), (-127.079, 129.517, 120), (-128.238, 131.147, 120), (-129.396, 132.777, 120), (-130.555, 134.407, 120), (-131.714, 136.037, 120), (-132.446, 137.066, 120, 0), (-132.446, 137.066, 0, 0)]

# pathfile: emptymogo1.txt
emptymogo1 = [(90.873, -109.996, 120, 0), (92.127, -108.438, 120), (93.381, -106.88, 120), (94.635, -105.322, 120), (95.888, -103.763, 120), (97.142, -102.205, 120), (98.396, -100.647, 120), (99.65, -99.089, 120), (100.903, -97.531, 120), (102.157, -95.972, 120), (103.411, -94.414, 120), (104.665, -92.856, 120), (105.919, -91.298, 120), (107.172, -89.74, 120), (108.426, -88.181, 120), (109.68, -86.623, 120), (110.934, -85.065, 120), (112.188, -83.507, 120), (113.441, -81.949, 120), (114.695, -80.39, 120), (115.949, -78.832, 120), (117.203, -77.274, 120), (118.457, -75.716, 120), (119.71, -74.157, 120), (120.964, -72.599, 120), (122.218, -71.041, 120), (123.472, -69.483, 120), (124.725, -67.925, 120), (125.648, -66.778, 120, 0), (125.648, -66.778, 0, 0)]

# pathfile: emptymogo2.txt
emptymogo2 = [(129.119, -49.758, 120, 0), (128.791, -47.786, 120), (128.462, -45.813, 120), (128.133, -43.84, 120), (127.804, -41.867, 120), (127.475, -39.894, 120), (127.147, -37.922, 120), (126.818, -35.949, 120), (126.489, -33.976, 120), (126.16, -32.003, 120), (125.831, -30.031, 120), (125.503, -28.058, 120), (125.174, -26.085, 120), (124.845, -24.112, 120), (124.516, -22.139, 120), (124.187, -20.167, 120), (123.859, -18.194, 120), (123.53, -16.221, 120), (123.201, -14.248, 120), (122.872, -12.275, 120), (122.543, -10.303, 120), (122.215, -8.33, 120), (121.886, -6.357, 120), (121.557, -4.384, 120), (121.228, -2.411, 120), (120.899, -0.439, 120), (120.514, 1.874, 120, 0), (120.514, 1.874, 0, 0)]

#pathfile: emptymogo3.txt
emptymogo3 = [(118.03, 11.803), (116.03, 11.828), (114.032, 11.901), (112.036, 12.024), (110.043, 12.199), (108.057, 12.428), (106.078, 12.715), (104.108, 13.061), (102.15, 13.469), (100.207, 13.941), (98.282, 14.484), (96.377, 15.094), (94.496, 15.772), (92.642, 16.521), (90.817, 17.339), (89.026, 18.228), (87.276, 19.196), (85.566, 20.234), (83.899, 21.338), (82.278, 22.509), (80.713, 23.754), (79.199, 25.06), (77.736, 26.424), (76.332, 27.848), (74.987, 29.328), (73.697, 30.856), (72.465, 32.431), (71.295, 34.053), (70.179, 35.713), (69.118, 37.408), (68.118, 39.14), (67.17, 40.901), (66.272, 42.687), (65.429, 44.501), (64.636, 46.337), (63.888, 48.192), (63.186, 50.064), (62.532, 51.954), (61.918, 53.858), (61.344, 55.774), (60.812, 57.701), (60.318, 59.639), (59.859, 61.586), (59.433, 63.54), (59.044, 65.502), (58.686, 67.469), (58.357, 69.442), (58.057, 71.419), (57.788, 73.401), (57.544, 75.386), (57.325, 77.374), (57.133, 79.365), (56.964, 81.358), (56.818, 83.352), (56.693, 85.348), (56.59, 87.346), (56.506, 89.344), (56.442, 91.343), (56.397, 93.342), (56.368, 95.342), (56.356, 97.342), (56.36, 99.342), (56.379, 101.342), (56.412, 103.342), (56.458, 105.341), (56.516, 107.34), (56.584, 109.339), (56.662, 111.338), (56.746, 113.336), (56.836, 115.334), (56.927, 117.332), (57.015, 119.33), (57.092, 121.328), (57.143, 123.328), (58.017, 124.897), (59.612, 126.104), (61.223, 127.289), (62.844, 128.461), (64.473, 129.621), (66.117, 130.76), (67.772, 131.883), (69.437, 132.99), (71.114, 134.081), (72.806, 135.147), (74.509, 136.195), (76.224, 137.225), (77.95, 138.235), (79.692, 139.218), (81.446, 140.178), (83.213, 141.115), (84.992, 142.028), (86.785, 142.914), (88.591, 143.774), (90.413, 144.6), (92.247, 145.395), (94.096, 146.159), (95.958, 146.889), (97.833, 147.583), (99.722, 148.239), (101.625, 148.856), (103.541, 149.429), (105.47, 149.958), (107.411, 150.439), (109.364, 150.87), (111.328, 151.247), (113.302, 151.568), (115.285, 151.821), (117.276, 152.011), (119.272, 152.132), (121.271, 152.182), (123.271, 152.148), (125.267, 152.028), (127.256, 151.824), (129.232, 151.517), (131.191, 151.112), (133.123, 150.599), (135.023, 149.974), (136.879, 149.231), (138.685, 148.374), (140.424, 147.387), (142.093, 146.286), (143.675, 145.063), (145.159, 143.723), (146.541, 142.279), (147.809, 140.733), (148.955, 139.094), (149.982, 137.379), (150.884, 135.594), (151.659, 133.751), (152.319, 131.864), (152.852, 129.936), (153.279, 127.983), (153.59, 126.008), (153.807, 124.02), (153.916, 122.023), (153.941, 120.023), (153.876, 118.025), (153.728, 116.03), (153.508, 114.043), (153.215, 112.064), (152.851, 110.098), (152.425, 108.144), (151.941, 106.204), (151.401, 104.278), (150.809, 102.368), (150.164, 100.475), (149.472, 98.598), (148.735, 96.739), (147.956, 94.897), (147.137, 93.073), (146.28, 91.266), (145.387, 89.476), (144.46, 87.704), (143.5, 85.95), (142.508, 84.213), (141.487, 82.493), (140.437, 80.791), (139.357, 79.108), (138.251, 77.441), (137.121, 75.792), (135.967, 74.158), (133.751, 71.144), (133.751, 71.144)]
#pathfile: emptymogo4.txt
emptymogo4 = [(118.099, 93.436), (116.278, 94.262), (114.457, 95.089), (112.635, 95.915), (110.814, 96.742), (108.993, 97.568), (107.172, 98.395), (105.35, 99.222), (103.529, 100.048), (101.708, 100.875), (99.887, 101.701), (98.066, 102.528), (96.244, 103.354), (94.423, 104.181), (92.602, 105.007), (90.781, 105.834), (88.96, 106.661), (87.138, 107.487), (85.317, 108.314), (83.496, 109.14), (81.675, 109.967), (79.854, 110.793), (78.032, 111.62), (76.211, 112.446), (74.39, 113.273), (72.569, 114.099), (70.747, 114.926), (68.926, 115.753), (67.105, 116.579), (65.284, 117.406), (63.463, 118.232), (61.641, 119.059), (59.82, 119.885), (57.999, 120.712), (56.441, 121.419), (56.441, 121.419)]

#mogo_in_right_top_corner1 = [(-143.5, -152.197), (-141.561, -151.706), (-139.622, -151.215), (-137.684, -150.724), (-135.745, -150.233), (-133.806, -149.742), (-131.867, -149.251), (-129.929, -148.76), (-127.99, -148.269), (-126.051, -147.778), (-124.112, -147.287), (-122.173, -146.795), (-120.235, -146.304), (-118.296, -145.813), (-116.357, -145.322), (-114.418, -144.831), (-112.479, -144.34), (-110.541, -143.849), (-108.602, -143.358), (-106.663, -142.867), (-104.724, -142.376), (-102.786, -141.885), (-100.847, -141.394), (-98.908, -140.903), (-96.969, -140.412), (-95.03, -139.921), (-93.092, -139.43), (-91.153, -138.939), (-89.214, -138.448), (-87.275, -137.957), (-85.337, -137.466), (-83.398, -136.975), (-81.459, -136.484), (-79.52, -135.992), (-77.581, -135.501), (-75.643, -135.01), (-73.704, -134.519), (-71.765, -134.028), (-69.826, -133.537), (-67.888, -133.046), (-65.949, -132.555), (-64.01, -132.064), (-62.071, -131.573), (-60.132, -131.082), (-58.194, -130.591), (-56.255, -130.1), (-54.316, -129.609), (-52.377, -129.118), (-50.438, -128.627), (-48.5, -128.136), (-46.561, -127.645), (-44.622, -127.154), (-42.683, -126.663), (-40.745, -126.172), (-38.806, -125.681), (-36.867, -125.189), (-34.928, -124.698), (-32.989, -124.207), (-31.051, -123.716), (-29.112, -123.225), (-27.173, -122.734), (-25.234, -122.243), (-23.296, -121.752), (-21.357, -121.261), (-19.418, -120.77), (-17.479, -120.279), (-15.54, -119.788), (-13.602, -119.297), (-11.663, -118.806), (-9.724, -118.315), (-7.785, -117.824), (-5.846, -117.333), (-3.908, -116.842), (-1.242, -116.167), (-1.242, -116.167)]
# Optimized Path
# pathfile: mogo_in_right_top_corner1_x1.txt
mogo_in_right_top_corner1 = [(-100.919, -119.814, 120, 0), (-98.92, -119.751, 120), (-96.921, -119.689, 120), (-94.922, -119.626, 120), (-92.923, -119.564, 120), (-90.924, -119.502, 120), (-88.925, -119.439, 120), (-86.926, -119.377, 120), (-84.927, -119.314, 120), (-82.928, -119.252, 120), (-80.929, -119.189, 120), (-78.93, -119.127, 120), (-76.931, -119.064, 120), (-74.932, -119.002, 120), (-72.933, -118.939, 120), (-70.933, -118.953, 120, 0), (-68.934, -118.989, 120), (-66.934, -119.026, 120), (-64.934, -119.062, 120), (-62.935, -119.099, 120), (-60.935, -119.136, 120), (-58.935, -119.172, 120), (-56.936, -119.209, 120), (-54.936, -119.245, 120), (-52.936, -119.282, 120), (-50.937, -119.319, 120), (-48.937, -119.355, 120), (-46.937, -119.392, 120), (-44.938, -119.428, 120), (-42.938, -119.465, 120), (-40.938, -119.501, 120), (-38.939, -119.538, 120), (-36.939, -119.575, 120), (-34.939, -119.611, 120), (-32.94, -119.648, 120), (-30.94, -119.684, 120), (-28.94, -119.721, 120), (-26.941, -119.757, 120), (-24.941, -119.794, 120), (-22.941, -119.831, 120), (-20.942, -119.867, 120), (-18.942, -119.904, 120), (-16.942, -119.94, 120), (-14.943, -119.977, 120), (-12.943, -120.014, 120), (-10.943, -120.05, 120), (-8.944, -120.087, 120), (-6.944, -120.123, 120), (-4.944, -120.16, 120), (-2.945, -120.196, 120), (-0.945, -120.233, 120), (0.445, -120.258, 120, 0), (0.445, -120.258, 0, 0)]

# pathfile: mogo_in_right_top_corner2.txt
mogo_in_right_top_corner2 = [(30.635, -118.124, 120, 0), (32.477, -117.343, 120), (34.318, -116.562, 120), (36.158, -115.78, 120), (37.999, -114.996, 120), (39.838, -114.212, 120), (41.677, -113.426, 120), (43.516, -112.638, 120), (45.354, -111.849, 120), (47.191, -111.059, 120), (49.027, -110.267, 120), (50.863, -109.473, 120), (52.698, -108.677, 120), (54.532, -107.879, 120), (56.364, -107.078, 120), (58.196, -106.275, 120), (60.027, -105.47, 120), (61.856, -104.662, 120), (63.684, -103.85, 120), (65.511, -103.035, 120), (67.335, -102.216, 120), (69.158, -101.393, 120), (70.979, -100.566, 120), (72.798, -99.734, 120), (74.614, -98.897, 120), (76.428, -98.053, 120), (78.238, -97.204, 120), (80.046, -96.347, 120), (81.849, -95.484, 120), (83.649, -94.612, 120), (85.445, -93.731, 120), (87.237, -92.842, 120), (89.023, -91.944, 120), (90.806, -91.036, 120), (92.583, -90.12, 120), (94.357, -89.195, 120), (96.126, -88.262, 120), (97.892, -87.323, 120), (99.655, -86.379, 120), (101.416, -85.431, 120), (103.176, -84.481, 120), (104.936, -83.531, 120), (106.695, -82.58, 120), (108.456, -81.631, 120), (110.218, -80.685, 120), (111.981, -79.741, 120), (113.746, -78.8, 120), (115.512, -77.862, 120), (117.281, -76.928, 120), (119.051, -75.998, 120), (120.823, -75.071, 120), (122.597, -74.147, 120), (124.373, -73.227, 120), (126.151, -72.31, 120), (127.93, -71.397, 120), (129.711, -70.487, 120), (131.493, -69.579, 120), (133.277, -68.675, 120), (135.062, -67.773, 120), (136.848, -66.874, 120), (138.636, -65.977, 120), (140.425, -65.083, 120), (142.215, -64.191, 120), (144.006, -63.301, 120), (145.798, -62.413, 120), (147.591, -61.527, 120), (150.537, -60.077, 120, 0), (150.537, -60.077, 0, 0)]

# pathfile: top_right_doinker.txt
top_right_doinker = [(123.255, -90.709, 120, 0), (124.597, -92.18, 120), (126.156, -93.432, 120), (127.765, -94.62, 120), (129.389, -95.788, 120), (131.013, -96.955, 120), (132.629, -98.133, 120), (134.233, -99.328, 120), (135.818, -100.547, 120), (137.382, -101.793, 120), (138.921, -103.071, 120), (140.432, -104.382, 120), (141.909, -105.73, 120), (143.35, -107.117, 120), (144.748, -108.546, 120), (146.101, -110.019, 120), (147.403, -111.538, 120), (148.647, -113.104, 120), (149.827, -114.718, 120), (150.938, -116.381, 120), (151.97, -118.094, 120), (152.919, -119.854, 120), (153.776, -121.661, 120), (154.535, -123.511, 120), (155.188, -125.401, 120), (155.731, -127.326, 120), (156.28, -129.956, 120, 0), (156.28, -129.956, 0, 0)]
# pathfile: toprightmogo1.txt
toprightmogo1 = [(126.251, -145.852, 120, 0), (124.373, -145.165, 120), (122.493, -144.481, 120), (120.613, -143.799, 120), (118.732, -143.12, 120), (116.85, -142.443, 120), (114.967, -141.769, 120), (113.083, -141.099, 120), (111.197, -140.431, 120), (109.311, -139.767, 120), (107.423, -139.106, 120), (105.534, -138.449, 120), (103.644, -137.796, 120), (101.752, -137.148, 120), (99.858, -136.504, 120), (97.963, -135.864, 120), (96.066, -135.231, 120), (94.168, -134.602, 120), (92.267, -133.98, 120), (90.364, -133.365, 120), (88.458, -132.757, 120), (86.551, -132.157, 120), (84.641, -131.564, 120), (82.728, -130.977, 120), (80.817, -130.389, 120), (78.925, -129.742, 120), (78.443, -128.641, 120, 0), (78.443, -128.641, 0, 0)]

# pathfile: toprightmogo2.txt
toprightmogo2 = [(87.527, -132.466, 120, 0), (89.377, -133.226, 120), (91.227, -133.986, 120), (93.077, -134.746, 120), (94.927, -135.505, 120), (96.777, -136.265, 120), (98.627, -137.025, 120), (100.477, -137.785, 120), (102.327, -138.545, 120), (104.177, -139.305, 120), (106.027, -140.065, 120), (107.877, -140.824, 120), (109.727, -141.584, 120), (111.577, -142.344, 120), (113.427, -143.104, 120), (115.277, -143.864, 120), (117.127, -144.624, 120), (118.977, -145.384, 120), (120.827, -146.144, 120), (122.677, -146.903, 120), (124.527, -147.663, 120), (126.377, -148.423, 120), (128.227, -149.183, 120), (130.077, -149.943, 120), (131.927, -150.703, 120), (133.777, -151.463, 120), (135.627, -152.223, 120), (137.477, -152.982, 120), (139.327, -153.742, 120), (141.177, -154.502, 120), (143.027, -155.262, 120), (144.877, -156.022, 120), (146.082, -156.517, 120, 0), (146.082, -156.517, 0, 0)]
topleftmogo2 = [(x, -y) for x, y, *_ in toprightmogo2]

# pathfile: lastmogo.txt
lastmogo = [(154.274, 147.604, 120, 0), (153.649, 145.704, 120), (153.081, 143.787, 120), (152.564, 141.855, 120), (152.091, 139.911, 120), (151.657, 137.959, 120), (151.256, 136.0, 120), (150.887, 134.034, 120), (150.541, 132.064, 120), (150.216, 130.091, 120), (149.906, 128.115, 120), (149.609, 126.137, 120), (149.321, 124.158, 120), (149.037, 122.178, 120), (148.753, 120.199, 120), (148.467, 118.219, 120), (148.173, 116.241, 120), (147.868, 114.264, 120), (147.547, 112.29, 120), (147.205, 110.32, 120), (146.837, 108.354, 120), (146.436, 106.394, 120), (145.997, 104.443, 120), (145.511, 102.503, 120), (144.971, 100.578, 120), (144.367, 98.671, 120), (143.688, 96.79, 120), (142.921, 94.943, 120), (142.051, 93.143, 120), (141.066, 91.403, 120), (139.955, 89.74, 120), (138.699, 88.185, 120), (137.298, 86.759, 120), (135.752, 85.493, 120), (134.071, 84.411, 120), (132.281, 83.522, 120), (130.401, 82.844, 120), (128.462, 82.358, 120), (126.486, 82.051, 120), (124.492, 81.906, 120), (122.493, 81.901, 120), (120.496, 82.017, 120), (118.51, 82.246, 120), (116.535, 82.563, 120), (114.576, 82.961, 120), (112.631, 83.427, 120), (110.703, 83.958, 120), (108.789, 84.539, 120), (106.89, 85.167, 120), (105.008, 85.842, 120), (103.139, 86.554, 120), (101.283, 87.3, 120), (99.44, 88.077, 120), (97.609, 88.882, 120), (95.79, 89.713, 120), (93.982, 90.567, 120), (91.023, 92.02, 120, 0), (91.023, 92.02, 0, 0)]

#pathfile: passivehang.txt
passivehang = [(88.148, 100.166), (86.801, 98.687), (85.459, 97.205), (84.12, 95.719), (82.785, 94.23), (81.454, 92.737), (80.127, 91.241), (78.802, 89.742), (77.481, 88.241), (76.163, 86.737), (74.847, 85.23), (73.534, 83.722), (72.224, 82.211), (70.916, 80.698), (69.61, 79.183), (68.307, 77.666), (67.005, 76.148), (65.705, 74.628), (64.406, 73.107), (63.11, 71.584), (61.814, 70.06), (60.52, 68.535), (59.227, 67.009), (57.936, 65.483), (56.645, 63.955), (55.355, 62.427), (54.065, 60.898), (52.777, 59.368), (51.489, 57.838), (50.201, 56.308), (48.914, 54.777), (47.626, 53.247), (46.339, 51.716), (45.052, 50.185), (43.765, 48.654), (42.478, 47.123), (41.19, 45.593), (39.902, 44.063), (38.614, 42.533), (37.325, 41.004), (36.035, 39.476), (34.744, 37.948), (33.453, 36.421), (32.161, 34.894), (30.867, 33.369), (29.572, 31.844), (28.276, 30.321), (26.979, 28.799), (25.68, 27.278), (24.379, 25.759), (23.077, 24.241), (21.773, 22.724), (20.467, 21.21), (19.159, 19.697), (17.849, 18.186), (16.537, 16.676), (15.222, 15.169), (13.905, 13.664), (12.585, 12.162), (11.262, 10.662), (9.937, 9.164), (8.537, 7.589), (8.537, 7.589)]
passivehangreverse = passivehang[::-1] 

# Wall stakes test paths
wallStakeTestp1 = [(-119.221, 68.281), (-117.538, 67.201), (-115.841, 66.142), (-114.13, 65.107), (-112.404, 64.096), (-110.662, 63.113), (-108.904, 62.161), (-107.129, 61.238), (-105.337, 60.351), (-103.527, 59.501), (-101.698, 58.69), (-99.851, 57.923), (-97.985, 57.205), (-96.1, 56.536), (-94.196, 55.924), (-92.273, 55.376), (-90.332, 54.894), (-88.374, 54.485), (-86.402, 54.157), (-84.417, 53.915), (-82.422, 53.767), (-80.423, 53.723), (-78.424, 53.785), (-76.433, 53.962), (-74.454, 54.255), (-72.499, 54.673), (-70.573, 55.21), (-68.684, 55.867), (-66.839, 56.637), (-65.041, 57.514), (-63.295, 58.488), (-61.6, 59.549), (-59.954, 60.685), (-58.351, 61.881), (-56.785, 63.125), (-55.244, 64.4), (-53.714, 65.687), (-52.173, 66.962), (-50.595, 68.19), (-48.939, 69.311), (-47.159, 70.217), (-45.56, 71.417), (-43.967, 72.626), (-42.374, 73.835), (-40.78, 75.043), (-39.187, 76.252), (-37.594, 77.461), (-36.0, 78.67), (-34.407, 79.879), (-32.814, 81.088), (-31.22, 82.297), (-29.627, 83.506), (-28.034, 84.714), (-26.44, 85.923), (-24.847, 87.132), (-23.254, 88.341), (-21.66, 89.55), (-20.067, 90.759), (-18.474, 91.968), (-16.881, 93.176), (-15.287, 94.385), (-13.694, 95.594), (-12.101, 96.803), (-10.507, 98.012), (-8.914, 99.221), (-7.321, 100.43), (-5.727, 101.639), (-4.134, 102.847), (-2.541, 104.056), (-1.425, 104.903), (-1.425, 104.903)]
wallStakeTestp2 = [(-1.425, 104.903), (-1.425, 106.903), (-1.425, 108.903), (-1.425, 110.903), (-1.425, 112.903), (-1.425, 114.903), (-1.425, 116.903), (-1.425, 118.903), (-1.425, 120.903), (-1.425, 122.903), (-1.425, 124.903), (-1.424, 126.903), (-1.424, 128.903), (-1.424, 130.903), (-1.424, 132.903), (-1.424, 134.903), (-1.424, 136.903), (-1.424, 138.903), (-1.424, 140.903), (-1.424, 142.903), (-1.424, 144.903), (-1.424, 146.903), (-1.424, 148.903), (-1.424, 150.903), (-1.424, 152.903), (-1.424, 154.903), (-1.424, 156.903), (-1.423, 158.903), (-1.423, 160.903), (-1.423, 162.903), (-1.423, 164.903), (-1.423, 166.903), (-1.423, 168.903), (-1.423, 170.903), (-1.423, 172.903), (-1.423, 174.903), (-1.423, 176.911), (-1.423, 176.911)]
wallStakeTestp2part2 = [(-19.446, 95.807), (-17.971, 97.157), (-16.506, 98.519), (-15.055, 99.896), (-13.623, 101.292), (-12.216, 102.713), (-10.837, 104.162), (-9.494, 105.644), (-8.193, 107.163), (-6.942, 108.723), (-5.747, 110.326), (-4.614, 111.974), (-3.549, 113.667), (-2.557, 115.403), (-1.638, 117.18), (-0.795, 118.993), (-0.028, 120.84), (0.668, 122.715), (1.296, 124.614), (1.858, 126.533), (2.361, 128.469), (2.81, 130.418), (3.206, 132.378), (3.557, 134.347), (3.867, 136.322), (4.139, 138.304), (4.377, 140.29), (4.584, 142.279), (4.763, 144.271), (4.916, 146.265), (5.046, 148.261), (5.155, 150.258), (5.245, 152.256), (5.317, 154.254), (5.373, 156.254), (5.415, 158.253), (5.443, 160.253), (5.459, 162.253), (5.463, 164.253), (5.457, 166.253), (5.441, 168.253), (5.416, 170.253), (5.383, 172.252), (5.342, 174.252), (5.294, 176.251), (5.24, 178.251), (5.179, 180.25), (5.112, 182.249), (5.04, 184.247), (4.963, 186.246), (4.845, 189.104), (4.845, 189.104)]
wallStakeTestp2part3 = [(-1.423, 176.911), (-1.323, 174.914), (-1.223, 172.916), (-1.122, 170.919), (-1.022, 168.921), (-0.922, 166.924), (-0.822, 164.926), (-0.722, 162.929), (-0.622, 160.931), (-0.521, 158.934), (-0.421, 156.936), (-0.321, 154.939), (-0.221, 152.941), (-0.121, 150.944), (-0.067, 149.867), (-0.067, 149.867)]
wallStakeTestp3 = [(-1.423, 176.911), (-1.323, 174.914), (-1.223, 172.916), (-1.122, 170.919), (-1.022, 168.921), (-0.922, 166.924), (-0.822, 164.926), (-0.722, 162.929), (-0.622, 160.931), (-0.521, 158.934), (-0.421, 156.936), (-0.321, 154.939), (-0.221, 152.941), (-0.121, 150.944), (-0.067, 149.867), (-0.067, 149.867)]
wallStakeTestp4 = [(-0.067, 149.867), (-0.039, 147.867), (-0.011, 145.867), (0.017, 143.867), (0.045, 141.868), (0.072, 139.868), (0.1, 137.868), (0.128, 135.868), (0.156, 133.868), (0.184, 131.869), (0.212, 129.869), (0.239, 127.869), (0.267, 125.869), (0.295, 123.869), (0.323, 121.87), (0.351, 119.87), (0.378, 117.87), (0.406, 115.87), (0.434, 113.87), (0.462, 111.871), (0.474, 110.985), (0.474, 110.985)]

rightwallStakeTestp1 = [(x, -y) for (x, y) in wallStakeTestp1]
rightwallStakeTestp2 = [(x, -y) for (x, y) in wallStakeTestp2]
rightwallStakeTestp2part2 = [(x, -y) for (x, y) in wallStakeTestp2part2]
rightwallStakeTestp2part3 = [(x, -y) for (x, y) in wallStakeTestp2part3]
rightwallStakeTestp3 = [(x, -y) for (x, y) in wallStakeTestp3]
rightwallStakeTestp4 = [(x, -y) for (x, y) in wallStakeTestp4]

#---------------------------------------------------------------------------------------------------------------------------------------------------

# Make random actually random
def initializeRandomSeed():
    wait(100, MSEC)
    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()
    #urandom.seed(int(random))
      
# Set random seed 
initializeRandomSeed()


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

#gyro start
gyro = Inertial(Ports.PORT9)
gyro.orientation(OrientationType.YAW)
gyro.calibrate()
gyro.set_rotation(0, DEGREES)
gyro.set_heading(0, DEGREES)
 
 
tolerance = 6
lookahead = 50
current_x = -1
current_y =  -1
previous_vertical_encoder = 0
previous_horizontal_encoder = 0
robot_not_walking = 0
MAX_WAIT_FOR_NO_WALK= 10
forward_velocity = 40
turn_velocity_k = 40
left_velocity = 5
right_velocity = 5
#forward_velocity/100
odom_wheel_circumference = math.pi * 2  # wheel diameter in inches
feet_to_unit = 2.5
odom_gear_ratio = 1
current_angle = 0

def verticalEncoder():
    global vertical_rotational_sensor
    return vertical_rotational_sensor.position(DEGREES)

def horizontalEncoder():
    global horizontal_rotational_sensor
    return horizontal_rotational_sensor.position(DEGREES)

position_debug = True
def update_position():
    global current_x, current_y, current_angle, previous_vertical_encoder, previous_horizontal_encoder, robot_not_walking, position_debug

    # Calculate the distance traveled by each pod
    vertical_encoder = ((verticalEncoder() / 360) * odom_wheel_circumference * odom_gear_ratio) * feet_to_unit
    horizontal_encoder = ((horizontalEncoder() / 360) * odom_wheel_circumference * odom_gear_ratio) * feet_to_unit
    delta_vertical = vertical_encoder - previous_vertical_encoder
    delta_horizontal = horizontal_encoder - previous_horizontal_encoder

    if delta_vertical == delta_horizontal and delta_vertical == 0:
        robot_not_walking = robot_not_walking + 1
    else:
        robot_not_walking = 0
    previous_vertical_encoder = vertical_encoder
    previous_horizontal_encoder = horizontal_encoder

    current_angle = 2* math.pi - math.radians(gyro.heading(DEGREES))

    # Calculate the robot's linear change
    delta_d = delta_vertical
    delta_x = delta_horizontal * math.cos(current_angle)
    delta_y = delta_horizontal * math.sin(current_angle)

    current_y += delta_d * math.sin(current_angle) 
    current_x += delta_d * math.cos(current_angle) 

    if position_debug:
        print("x: " + str(current_x) + " y: " + str(current_y) + " angle: " + str(current_angle))

def calculate_lookahead_point(points_list, lookahead_distance):
    global current_x, current_y, start_pos_size, forward_velocity, tolerance
    closest_offset = -1
    lookahead_offset = -1
    closest_distance = float('inf')

    #if len(points_list) == 0:
    #    return
    min_distance = float('inf')
    min_index = -1  # To keep track of the nearest valid point index

    num_points = len(points_list)  # Number of points to check
    for i in range(num_points-1):
        dist = math.sqrt((points_list[i][0] - current_x) ** 2 + (points_list[i][1] - current_y) ** 2)    
        if dist < tolerance:
            min_index = i
    if min_index != -1:
        del points_list[:min_index]
        min_index = -1
        num_points = len(points_list)  # Number of points to check

    if len(points_list) == 0:
        return
    lookahead_point = None
    closest_point = points_list[0]
    for i in range(num_points-1):
        start = points_list[i]
        end = points_list[i + 1]
        segment_length = math.sqrt((end[0] - start[0]) ** 2 + (end[1] - start[1]) ** 2)
        if segment_length == 0:
            continue
        t = ((current_x - start[0]) * (end[0] - start[0]) + (current_y - start[1]) * (end[1] - start[1])) / segment_length ** 2
        t = max(0, min(1, t))
        closest_x = start[0] + t * (end[0] - start[0])
        closest_y = start[1] + t * (end[1] - start[1])
        distance = math.sqrt((closest_x - current_x) ** 2 + (closest_y - current_y) ** 2)

        if len(points_list) == 2 and distance <  2* tolerance:
            closest_point = (points_list[1][0], points_list[1][1])
            del points_list[0]
            break

        if distance < closest_distance:
            closest_distance = distance
            closest_offset = i
            closest_point = (closest_x, closest_y)

        if distance >= lookahead_distance:
            if lookahead_point is None:
                temp_smallest_lookahead_distance = distance
                lookahead_offset = i
                lookahead_point = (closest_x, closest_y)
            elif distance < temp_smallest_lookahead_distance:
                temp_smallest_lookahead_distance = distance
                lookahead_offset = i
                lookahead_point = (closest_x, closest_y)

    if closest_offset > 0 and lookahead_point is None:
        #print("Dropping1 :" + str(points_list[:closest_offset]))
        del points_list[:closest_offset]
        closest_offset = 0
    if lookahead_point:
        #print("Dropping2 :" + str(points_list[:lookahead_offset]))
        del points_list[:lookahead_offset]
    return lookahead_point if lookahead_point else closest_point

# Function to calculate drive speeds
def calculate_drive_speeds(lookahead_point, direction):
    global current_x, current_y, current_angle, left_velocity, right_velocity, forward_velocity, turn_velocity_k
    dx = lookahead_point[0] - current_x
    dy = lookahead_point[1] - current_y

    # Calculate the angle to the target point
    point_angle = math.atan2(dy, dx)
   
    # Adjust the current angle based on the direction
    adjusted_current_angle = current_angle
    if direction == -1:
        adjusted_current_angle += math.pi  # Add 180 degrees (π radians) to the current angle

    # Normalize the adjusted current angle to be within the range [-π, π]
    adjusted_current_angle = (adjusted_current_angle + math.pi) % (2 * math.pi) - math.pi

    # Calculate the angle difference between the adjusted current heading and the target point
    point_angle_diff = point_angle - adjusted_current_angle


    # Normalize the angle difference to be within the range [-π, π]
    if point_angle_diff > math.pi:
        point_angle_diff -= 2 * math.pi
    elif point_angle_diff < -math.pi:
        point_angle_diff += 2 * math.pi

    #point_angle_diff = (point_angle_diff + math.pi) % (2 * math.pi) - math.pi

    # Calculate the wheel velocities based on the specified direction
    curr_forward_velocity = forward_velocity * direction
    curr_turn_velocity_k = turn_velocity_k
    left_velocity = curr_forward_velocity - point_angle_diff * curr_turn_velocity_k
    right_velocity = curr_forward_velocity + point_angle_diff * curr_turn_velocity_k

    # Clamp the velocities to the range [-100, 100]
    left_velocity = max(min(left_velocity, 100), -100)
    right_velocity = max(min(right_velocity, 100), -100)

    global current_x, current_y, current_angle, left_velocity, right_velocity, forward_velocity, turn_velocity_k
    dx = lookahead_point[0] - current_x
    dy = lookahead_point[1] - current_y

    # Calculate the angle to the target point
    point_angle = math.atan2(dy, dx)
   
    # Adjust the current angle based on the direction
    adjusted_current_angle = current_angle
    if direction == -1:
        adjusted_current_angle += math.pi  # Add 180 degrees (π radians) to the current angle

    # Normalize the adjusted current angle to be within the range [-π, π]
    adjusted_current_angle = (adjusted_current_angle + math.pi) % (2 * math.pi) - math.pi

    # Calculate the angle difference between the adjusted current heading and the target point
    point_angle_diff = point_angle - adjusted_current_angle


    # Normalize the angle difference to be within the range [-π, π]
    if point_angle_diff > math.pi:
        point_angle_diff -= 2 * math.pi
    elif point_angle_diff < -math.pi:
        point_angle_diff += 2 * math.pi

    #point_angle_diff = (point_angle_diff + math.pi) % (2 * math.pi) - math.pi

    # Calculate the wheel velocities based on the specified direction
    curr_forward_velocity = forward_velocity * direction
    curr_turn_velocity_k = turn_velocity_k
    left_velocity = curr_forward_velocity - point_angle_diff * curr_turn_velocity_k
    right_velocity = curr_forward_velocity + point_angle_diff * curr_turn_velocity_k

    # Clamp the velocities to the range [-100, 100]
    left_velocity = max(min(left_velocity, 100), -100)
    right_velocity = max(min(right_velocity, 100), -100)

def walk_path(points_list, lookahead_distance, stop_threshold, direction, decl = False, decl_dis = 22, decl_rate = 0.6, last_point_tolerance = 2.5):

    global current_x, current_y, start_pos_size, forward_velocity, turn_velocity_k, left_velocity, right_velocity, robot_not_walking
   
    original_list = len(points_list)

    numDeceleratePoints = 0
    start_pos_size = len(points_list)

    if current_x == -1:
        current_x = points_list[0][0]
        current_y = points_list[0][1]
        vertical_rotational_sensor.changed(update_position)
        horizontal_rotational_sensor.changed(update_position)

    running = True
    while running:
        adjust_high_scoring_motor_position()
        check_vision_sensor()
        stall_detection_and_handling()
        if len(points_list) == 0 or robot_not_walking > MAX_WAIT_FOR_NO_WALK:
            running = False
            robot_not_walking = 0
            break

        # Calculate the lookahead point
        next_point = calculate_lookahead_point(points_list, lookahead_distance)

        # Calculate drive speeds based on the specified direction
        calculate_drive_speeds(next_point, direction)
        #print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle) + " lspeed" + str(left_velocity) + " rspeed" + str(right_velocity))
        #len(points_list) < original_list/10 and
        if (len(points_list) != 0):
            dis_to_end = math.sqrt((points_list[-1][0] - current_x) ** 2 + (points_list[-1][1] - current_y) ** 2)
            #print(dis_to_end)
            if dis_to_end < decl_dis and decl:
                #print("declerating" + str((dis_to_end/(dis_to_end+5))) + " " + str(len(points_list)))
                if (dis_to_end < decl_dis /2):
                    decl_rate = 0.4
                    left_velocity = left_velocity * decl_rate
                    right_velocity = right_velocity * decl_rate
                else:
                    left_velocity = left_velocity * (dis_to_end/(dis_to_end+(dis_to_end/2))) * decl_rate
                    right_velocity = right_velocity * (dis_to_end/(dis_to_end+(dis_to_end/2))) * decl_rate
       
        # Update the robot's position/stop
        update_position()

        # Check if the robot has reached the current target point
        distance_to_point = math.sqrt((points_list[0][0] - current_x) ** 2 + (points_list[0][1] - current_y) ** 2)
        if len(points_list) == 1:
            final_distance = math.sqrt((points_list[-1][0] - current_x) ** 2 + (points_list[-1][1] - current_y) ** 2)
            if final_distance < last_point_tolerance:
                running = False
        elif distance_to_point < stop_threshold:  # Adjust the threshold as needed
            points_list.pop(0)  # Remove the reached point

        # Check if the robot has reached the last point
       

        # Set motor velocities
        left_drive_smart.set_velocity(left_velocity, PERCENT)
        left_drive_smart.spin(FORWARD)
        right_drive_smart.set_velocity(right_velocity, PERCENT)
        right_drive_smart.spin(FORWARD)
        #print("(" + str(current_x)+"," + str(current_y) + "),")

        wait(20, MSEC)

    # Stop motors when path is complete

    #print(dis_to_end)
    #vertical_rotational_sensor.changed(lambda: None)
    #horizontal_rotational_sensor.changed(lambda: None)
    left_drive_smart.stop()
    right_drive_smart.stop()

def autonomous_sample(): 
    global current_x, current_y, current_angle
    print("Starting autonomous sample
    while True:
        update_position()
        print("x: "+ str(current_x)+" y: " + str(current_y) + " angle: " + str(current_angle))
        wait(1, SECONDS)

def autonomous_blue_right():
    autonomous_more_donuts_side(blue_right_tomogo, blue_right_tofirststack, blue_right_lasttwo, first_blue_right_4, blue_right_back_4, blue_right_totower)

def autonomous_red_left():
    autonomous_more_donuts_side(red_left_tomogo, red_left_tofirststack, red_left_lasttwo, first_red_left_4, red_left_back_4, red_left_totower)

def autonomous_red_right():
    global p1redight, p2redright, p3redright, p4redright, p7redright
    autonomous_more_donuts_side_modified(red_right_tomogo, red_right_tofirststack, red_right_lasttwo, first_red_right_4, red_right_back_4, red_right_totower)
    #autonomous_extra_mogo_side(p1redright, p2redright, p3redright, p4redright, p7redright)

def autonomous_blue_left():
    global p1blueleft, p2blueleft, p3blueleft, p4blueleft, p7blueleft
    autonomous_more_donuts_side(blue_left_tomogo, blue_left_tofirststack, blue_left_lasttwo, first_blue_left_4, blue_left_back_4, blue_left_totower)
    #autonomous_extra_mogo_side(p1blueleft, p2blueleft, p3blueleft, p4blueleft, p7blueleft)

def autonomous_extra_mogo_side(p1, p2, p3, p4, p7):
    global intake_state, lookahead, tolerance
    #confirm about tolerance and direction    
    lookahead = 50
    print("autonomous_red_right: before p1")  
    walk_path(p1, lookahead, tolerance, 1)
   
    walk_path(p2, lookahead, tolerance, -1)
    print("autonomous_red_right: before p2")
    mogo_p.set(True)
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()
    wait(10, MSEC)
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)
   
    walk_path(p3, lookahead, tolerance, 1)
    print("autonomous_red_right: before p3")
 
    walk_path(p4, lookahead, tolerance, 1)
    print("autonomous_red_right: before p4")
    mogo_p.set(False)
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()

    walk_path(p7, lookahead, tolerance, 1)
    print("autonomous_red_right: before p4")
   
    """walk_path(p5, lookahead, tolerance, 1)
    print("autonomous_red_right: before p6")
    wait(100, MSEC)
    donker.set(True)"""
   
    #walk_path(p6, lookahead, tolerance, 1)
   
    print("autonomous_red_right: before p7")
   
    """walk_path(p5, lookahead, tolerance, 1)
    print("autonomous_red_right: END")"""
       

def autonomous_more_donuts_side(tomogo, tofirststack, last_two, first_4, back_4, to_tower):
    global intake_state, lookahead, high_score_target_angle, tolerance, forward_velocity, turn_velocity_k

    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()

    lookahead = 50
    tolerance = 2
    # go to mogo
    walk_path(tomogo, lookahead, tolerance, -1)
    # Capture the mogo
    mogo_p.set(True)
    wait(100, MSEC)

    # start intake to pick up the top donut including the stall code
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)

    # Bring down the intake to knock off the top donut
    update_position()
    print("autonomous_more_donuts_side: before tofirststack")
    walk_path(tofirststack, lookahead, tolerance, 1)
    update_position()
    lookahead = 20
    tolerance = 6
    print("autonomous_more_donuts_side: before last_two")
    walk_path(last_two, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before first_4")
    update_position()
    lookahead = 50
    walk_path(first_4, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before to_tower")
    back_reverse = back_4[::-1]
    print("autonomous_more_donuts_side: going back1")
    walk_path(back_4, lookahead, tolerance, -1)
    walk_path(back_reverse, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: going back2")
    walk_path(back_4, lookahead, tolerance, -1)
    walk_path(back_reverse, lookahead, tolerance, 1)
    walk_path(back_4, lookahead, tolerance, -1)
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    walk_path(to_tower, lookahead, tolerance, 1)
def autonomous_more_donuts_side_modified(tomogo, tofirststack, last_two, first_4, back_4, to_tower):
    global intake_state, lookahead, high_score_target_angle, tolerance, forward_velocity, turn_velocity_k
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()

    lookahead = 50
    tolerance = 2
    # go to mogo
    walk_path(tomogo, lookahead, tolerance, -1)
    # Capture the mogo
    mogo_p.set(True)
    wait(100, MSEC)

    # start intake to pick up the top donut including the stall code
    intake_state = IntakeState.RUNNING
    set_intake_motor_state(REVERSE)

    # Bring down the intake to knock off the top donut
    update_position()
    print("autonomous_more_donuts_side: before tofirststack")
    walk_path(tofirststack, lookahead, tolerance, 1)
    update_position()
    lookahead = 20
    tolerance = 6
    print("autonomous_more_donuts_side: before last_two")
    #walk_path(last_two, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before first_4")
    update_position()
    lookahead = 50
    walk_path(first_4, lookahead, tolerance, 1)
    print("autonomous_more_donuts_side: before to_tower")
    back_reverse_first = back_4[::-1]
    back_reverse_second = back_4[::-1]
    back_4_first = back_4[:]
    back_4_second = back_4[:]
    back_4_third = back_4[:]
    print("autonomous_more_donuts_side: going back1")
    walk_path(back_4_first, lookahead, tolerance, -1)
    walk_path(back_reverse_first, lookahead, tolerance, 1)
    wait(300, MSEC)
    print("autonomous_more_donuts_side: going back2")
    walk_path(back_4_second, lookahead, tolerance, -1)
    walk_path(back_reverse_second, lookahead, tolerance, 1)
    wait(300, MSEC)
    walk_path(back_4_third, lookahead, tolerance, -1)
    # Bring up high scoring motor
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    turn_velocity_k = 40
    forward_velocity = 40
    walk_path(to_tower, lookahead, tolerance, 1)

# driver.py 
def valid_seen_object(seen_objects):
    # A placeholder to check if the objects array is valid
    if len(seen_objects) > 0:
        for obj in seen_objects:
            object_size = obj.width * obj.height
            #print("Detected object with size: " + str(object_size))
            if object_size > MIN_REJECT_SIZE:
                return True
    return False

BRIGHTNESS_THRESHOLD = 0
# Function to check the vision sensor
def check_vision_sensor():
    global eject_object
    if Color_sensor.brightness() > BRIGHTNESS_THRESHOLD:
        if eject_object == RingType.RED:
            if Color_sensor.color() == Color.RED:
               print("Ejecting Red")
               ejection_p.set(True)
            elif Color_sensor.color() == Color.BLUE:
               ejection_p.set(False)
        else:
            if eject_object == RingType.BLUE:
                if Color_sensor.color() == Color.BLUE:
                    #print("Ejecting Blue")
                    ejection_p.set(True)
                elif Color_sensor.color() == Color.RED:
                    ejection_p.set(False)

# Function to display joystick positions (optional)
def display_joystick_positions():
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)
    #joystick_positions = f"{int(controller_1.axis3.position())} {int(controller_1.axis2.position())}"
    #brain.screen.print(joystick_positions)
    wait(0.1, SECONDS)

def scale_joystick_input(input_value):
    # Normalize the input to the range [-1, 1]
    normalized_input = input_value / 100.0
    # Apply cubic scaling
    scaled_input = normalized_input ** 3
    # Scale back to the range [-100, 100]
    if slow_drive:
        return scaled_input * 90
    else:
        return scaled_input * 100

# Function to set drive motor velocities based on controller input
def set_drive_motor_velocities():
    global slow_drive
    if controller_1.buttonA.pressing():
        slow_drive = not slow_drive
        while controller_1.buttonA.pressing():
            wait(10, MSEC)

    # Normal control
    left_joystick_y = controller_1.axis3.position()
    right_joystick_y = controller_1.axis2.position()

    # Apply scaling to joystick inputs
    left_joystick_y = scale_joystick_input(left_joystick_y)
    right_joystick_y = scale_joystick_input(right_joystick_y)

    # Set velocities for left and right drive motors
    left_drive_smart.set_velocity(left_joystick_y, PERCENT)
    if abs(left_joystick_y) < 5:
        left_drive_smart.stop()
    else:
        left_drive_smart.spin(FORWARD)

    right_drive_smart.set_velocity(right_joystick_y, PERCENT)
    if abs(right_joystick_y) < 5:
        right_drive_smart.stop()
    else:
        right_drive_smart.spin(FORWARD)
        
# Function to toggle the high scoring motor
def toggle_high_scoring_motor():
    global high_scoring_running, high_score_target_angle
    if controller_1.buttonLeft.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonUp.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
        high_scoring_running = False
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonRight.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_CAPTURE)
        high_scoring_running = True
        while controller_1.buttonLeft.pressing():
            wait(10, MSEC)

    if controller_1.buttonDown.pressing():
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_DOWN)
        high_scoring_running = False
        while controller_1.buttonDown.pressing():
            wait(10, MSEC)

# Function to toggle the intake motor
def toggle_intake_motor():
    global intake_state
    global consecutive_stall_count, retry_count, high_score_stall
    global intake_running

    if controller_1.buttonR1.pressing():

        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0

        set_intake_motor_state(FORWARD)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR1.pressing():
            wait(100, MSEC)

    if controller_1.buttonR2.pressing():
        intake_state = IntakeState.RUNNING if intake_state == IntakeState.STOPPED else IntakeState.STOPPED
        consecutive_stall_count = 0
        retry_count = 0
        set_intake_motor_state(REVERSE)
        wait(100, MSEC)  # Debounce delay
        while controller_1.buttonR2.pressing():
            wait(100, MSEC)

# Function to handle digital outputs based on controller buttons
def handle_digital_outputs():
    if controller_1.buttonL1.pressing():
        print("Mogo 1")
        mogo_p.set(False)
    if controller_1.buttonL2.pressing():
        print("Mogo 2")
        mogo_p.set(True)
    if controller_1.buttonX.pressing():
        intake_p.set(not intake_p.value())
    if controller_1.buttonY.pressing():
        donker.set(True)
    if controller_1.buttonB.pressing():
        donker.set(False)

# Autonomous function
def autonomous():
    global eject_object, gyro
    # Autonomous code
    # For example, move forward for a certain distance
    # define a variable slot_no and switch case based on the slot_no
    # to run the corresponding autonomous routine
    #wait(3, SECONDS)
    slot_no = 5
    if slot_no == 1:
        gyro.set_heading(180, DEGREES)
        eject_object = RingType.BLUE
        autonomous_red_left()
    elif slot_no == 2:
        gyro.set_heading(180, DEGREES)
        eject_object = RingType.BLUE
        autonomous_red_right()
    elif slot_no == 3:
        eject_object = RingType.NONE
        autonomous_blue_left()
    elif slot_no == 4:
        eject_object = RingType.RED
        autonomous_blue_right()
    elif slot_no == 5:
        eject_object = RingType.NONE
        autonomous_test()

    eject_object = RingType.NONE
    ejection_p.set(False)
    left_drive_smart.stop()
    right_drive_smart.stop()

# Driver control function
def drivercontrol():
    # Main control loop for driver control
    global eject_object
    eject_object = RingType.BLUE

    while True:
        set_drive_motor_velocities()
        toggle_high_scoring_motor()
        adjust_high_scoring_motor_position()
        toggle_intake_motor()
        check_vision_sensor()
        handle_digital_outputs()
        stall_detection_and_handling()

        wait(20, MSEC)

def stopIntake():
    wait(1.3, SECONDS)
    intake_lower.set_velocity(70, PERCENT)
    intake_upper.stop()


def autonomous_empty():
    left_drive_smart.set_velocity(95, PERCENT)
    right_drive_smart.set_velocity(95, PERCENT)
    left_drive_smart.spin(FORWARD)
    right_drive_smart.spin(FORWARD)
    wait(200, MSEC)
    left_drive_smart.stop()
    right_drive_smart.stop()


def thread_fn():
    global lookahead, tolerance, increasing_x, decreasing_x, test_square, intake_state, high_score_target_angle, test_circle, gyro, eject_object, forward_velocity, turn_velocity_k, position_debug
    # Reverse the test_circle path
    #reversed_test_square = test_square[::-1]
    #walk_path(test_square, lookahead, tolerance, 1)
    #walk_path(reversed_test_square, lookahead, tolerance, 1)
    decreasing_x = increasing_x[::-1]
    #walk_path(decreasing_x, lookahead, tolerance, -1)
    walk_path(increasing_x, lookahead, tolerance, 1)

def autonomous_test2():
    thr = Thread(thread_fn)

def autonomous_test():
    global lookahead, tolerance, increasing_x, test_square, intake_state, high_score_target_angle, test_circle, gyro, eject_object, forward_velocity, turn_velocity_k, position_debug
    #walk_path(increasing_x, lookahead, tolerance, 1)
    
    #mogo_p.set(True)
    #wait(1, SECONDS)
    #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
    #adjust_high_scoring_motor_position()
    #intake_state = IntakeState.RUNNING  
    #set_intake_motor_state(REVERSE)
    #gyro.set_heading(180, DEGREES)
    # Reverse the test_circle path
    # reversed_test_circle = test_circle[::-1]


    #walk_path(reversed_test_circle, lookahead, tolerance, 1)
    lookahead = 50
    wall_score_on = False
    set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
    adjust_high_scoring_motor_position()
    intake_state = IntakeState.RUNNING
    wait(100, MSEC)
    set_intake_motor_state(REVERSE)
    wait(1000, MSEC)

    if wall_score_on:
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_CAPTURE)
        adjust_high_scoring_motor_position()

    walk_path(alliance_stake, lookahead, tolerance, 1)
    only_test_3_4 = False
    if not only_test_3_4:
        print("alliance done with turning " + " x: " + str(current_x) + " y: " + str(current_y))
        walk_path(grabbing_mogo, lookahead, tolerance, -1)

        #walk_path(path_one, lookahead, tolerance, 1)
        #walk_path(path_two, lookahead, tolerance, 1)
        
        print("grabbing done with turning" + " x: " + str(current_x) + " y: " + str(current_y))
        mogo_p.set(True)
        wait(50, MSEC)

        if wall_score_on:
            # Left wall stake
            walk_path(wallStakeTestp1, lookahead, tolerance, 1)
    
            #intake_upper.stop()
            #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
            #adjust_high_scoring_motor_position()
            walk_path(wallStakeTestp2, lookahead, tolerance, 1)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(FORWARD)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
            wait(300, MSEC)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(REVERSE)
            #walk_path(wallStakeTestp2part2, lookahead, tolerance, 1)
            wait(200, MSEC)
            forward_velocity = 10
            turn_velocity_k = 10
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
            adjust_high_scoring_motor_position()

            wait(400, MSEC)
            walk_path(wallStakeTestp3, 1, tolerance, -1)
            wait(600, MSEC)
            forward_velocity = 40
            turn_velocity_k = 40
            walk_path(wallStakeTestp4, lookahead, tolerance, -1)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
        else:
            # Left bottom corner
            walk_path(collect_left_bottom_rings, lookahead , tolerance, 1)
            print("done 8" + " x: " + str(current_x) + " y: " + str(current_y))
            walk_path(collect_left_bottom_rings2, lookahead , tolerance, 1)
            print("done 9" + " x: " + str(current_x) + " y: " + str(current_y))
            walk_path(mogo_to_left_corner, lookahead, tolerance, 1)
        print("done 10" + " x: " + str(current_x) + " y: " + str(current_y))
        walk_path(mogo_to_left_corner2, lookahead, tolerance, -1)
        print("done 11" + " x: " + str(current_x) + " y: " + str(current_y))
        mogo_p.set(False)
        wait(50, MSEC)
        walk_path(corner_to_mogo, lookahead, tolerance, 1)
        print("done 6" + " x: " + str(current_x) + " y: " + str(current_y))
        walk_path(turn_to_mogo, lookahead, tolerance, -1)
        print("done 7" + " x: " + str(current_x) + " y: " + str(current_y))
        mogo_p.set(True)
        wait(50, MSEC)

        if wall_score_on:
            # Right wall score
            walk_path(rightwallStakeTestp1, lookahead, tolerance, 1)
        
            #intake_upper.stop()
            #high_score_target_angle = HIGH_SCORE_TARGET_ANGLE_WAIT
            #adjust_high_scoring_motor_position()
            walk_path(rightwallStakeTestp2, lookahead, tolerance, 1)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(FORWARD)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
            wait(300, MSEC)
            intake_state = IntakeState.RUNNING
            set_intake_motor_state(REVERSE)
            #walk_path(rightwallStakeTestp2part2, lookahead, tolerance, 1)
            wait(200, MSEC)
            forward_velocity = 10
            turn_velocity_k = 10
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
            adjust_high_scoring_motor_position()

            wait(400, MSEC)
            walk_path(rightwallStakeTestp3, 1, tolerance, -1)
            wait(600, MSEC)
            forward_velocity = 40
            turn_velocity_k = 40
            walk_path(rightwallStakeTestp4, lookahead, tolerance, -1)
            set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_WAIT)
            adjust_high_scoring_motor_position()
        else:
            #Right bottom corner
            walk_path(collect_right_bottom_rings, lookahead , tolerance, 1)
            print("done 8" + " x: " + str(current_x) + " y: " + str(current_y))

        walk_path(toprightmogo2_missing, lookahead , tolerance, 1)

        print("done 9" + " x: " + str(current_x) + " y: " + str(current_y))

        walk_path(mogo_to_corner, lookahead, tolerance, -1)
        print("done 10" + " x: " + str(current_x) + " y: " + str(current_y))
        walk_path(mogo_to_corner2, lookahead, 1, -1, True)
        print("done 11" + " x: " + str(current_x) + " y: " + str(current_y))
        mogo_p.set(False)
        wait(50, MSEC)
        eject_object = RingType.NONE
        walk_path(mogo_in_right_top_corner1, lookahead, tolerance, 1)

    # 3rd and 4th start from here
    walk_path(mogo_in_right_top_corner2, lookahead, tolerance, -1, True)
    mogo_p.set(True)
    donker.set(True)

    if only_test_3_4:
        wait(1, SECONDS)

    intake_state = IntakeState.STOPPED
    set_intake_motor_state()
    intake_lower.set_velocity(100, PERCENT)
    intake_lower.spin(REVERSE)
    intake_upper.spin(REVERSE)
    intake_upper.set_velocity(40, PERCENT)
    ws2 = Thread( stopIntake )
    walk_path(top_right_doinker, lookahead, tolerance, 1)

    if only_test_3_4:
        wait(1, SECONDS)

    toprightmogocopy = toprightmogo1[:]
    walk_path(toprightmogo1, lookahead, tolerance, 1)
    
    print("done running with doinker" + " x: " + str(current_x) + " y: " + str(current_y))
    #intake_lower.set_velocity(100, PERCENT)
    #intake_upper.set_velocity(100, PERCENT)
    mogo_p.set(False)
    donker.set(False)
    walk_path(toprightmogo2, lookahead, 2, -1, True)
    print("done dropping mogo, going fwd the way we came in" + " x: " + str(current_x) + " y: " + str(current_y))

    if only_test_3_4:
        wait(1, SECONDS)

    walk_path(toprightmogocopy, lookahead, tolerance, 1)
    intake_lower.set_velocity(100, PERCENT)
    print("done 12" + " x: " + str(current_x) + " y: " + str(current_y))
    #walk_path(emptymogo1, lookahead, tolerance, 1)
    #print("done 13")

    if only_test_3_4:
        wait(5, SECONDS)

    walk_path(emptymogo2, lookahead, tolerance, -1)
    mogo_p.set(True)
    eject_object = RingType.BLUE
    donker.set(True)

    if not only_test_3_4:
        intake_upper.set_velocity(100, PERCENT)
        intake_state = IntakeState.RUNNING
        set_intake_motor_state(REVERSE)
        
        walk_path(emptymogo3, lookahead, tolerance, 1)
        walk_path(emptymogo4, lookahead, tolerance, 1)
        walk_path(topleftmogo2, lookahead, 2, -1, True)
        donker.set(False)
        mogo_p.set(False)
        
        wait(500, MSEC)
        intake_state = IntakeState.STOPPED
        set_intake_motor_state(REVERSE)
        walk_path(lastmogo, lookahead, tolerance, 1)
        set_high_score_angle(HIGH_SCORE_TARGET_ANGLE_SCORE)
        adjust_high_scoring_motor_position()
        forward_velocity = 30
        turn_velocity_k = 30
        walk_path(passivehang, lookahead, tolerance, -1)
        forward_velocity = 15
        turn_velocity_k = 15
        walk_path(passivehangreverse, lookahead, tolerance, 1)
    
    
def unscoring():
    print("Hi")

    def gyro_test():
        global gyro
        while True:
            print(gyro.heading())
            wait(100, MSEC)

# Create a Competition object
#competition = Competition(drivercontrol, autonomous)
def main():
    # Any initialization code before the match starts
    print("Running main.py")
    wait(3, SECONDS)
    #mogo_p.set(False)
    #intake_p.set(True)
    #autonomous()
    autonomous_test()
    #drivercontrol()
    #autonomous()
    #intake_p.set(True)
    #drive
    #unscoring()
main()
